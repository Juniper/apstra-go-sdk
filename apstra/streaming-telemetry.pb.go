// Copyright (c) 2016 Apstrktr, Inc.  All rights reserved.
// Apstrktr, Inc. Confidential and Proprietary.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: apstra/streaming-telemetry.proto

package goapstra

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DeviceState int32

const (
	DeviceState_DEVICE_STATE_IS_ACTIVE       DeviceState = 1
	DeviceState_DEVICE_STATE_IS_READY        DeviceState = 2
	DeviceState_DEVICE_STATE_IS_NOCOMMS      DeviceState = 3
	DeviceState_DEVICE_STATE_IS_MAINT        DeviceState = 4
	DeviceState_DEVICE_STATE_IS_REBOOTING    DeviceState = 5
	DeviceState_DEVICE_STATE_OOS_STOCKED     DeviceState = 6
	DeviceState_DEVICE_STATE_OOS_QUARANTINED DeviceState = 7
	DeviceState_DEVICE_STATE_OOS_READY       DeviceState = 8
	DeviceState_DEVICE_STATE_OOS_NOCOMMS     DeviceState = 9
	DeviceState_DEVICE_STATE_OOS_DECOMM      DeviceState = 10
	DeviceState_DEVICE_STATE_OOS_MAINT       DeviceState = 11
	DeviceState_DEVICE_STATE_OOS_REBOOTING   DeviceState = 12
	DeviceState_DEVICE_STATE_ERROR           DeviceState = 13
)

// Enum value maps for DeviceState.
var (
	DeviceState_name = map[int32]string{
		1:  "DEVICE_STATE_IS_ACTIVE",
		2:  "DEVICE_STATE_IS_READY",
		3:  "DEVICE_STATE_IS_NOCOMMS",
		4:  "DEVICE_STATE_IS_MAINT",
		5:  "DEVICE_STATE_IS_REBOOTING",
		6:  "DEVICE_STATE_OOS_STOCKED",
		7:  "DEVICE_STATE_OOS_QUARANTINED",
		8:  "DEVICE_STATE_OOS_READY",
		9:  "DEVICE_STATE_OOS_NOCOMMS",
		10: "DEVICE_STATE_OOS_DECOMM",
		11: "DEVICE_STATE_OOS_MAINT",
		12: "DEVICE_STATE_OOS_REBOOTING",
		13: "DEVICE_STATE_ERROR",
	}
	DeviceState_value = map[string]int32{
		"DEVICE_STATE_IS_ACTIVE":       1,
		"DEVICE_STATE_IS_READY":        2,
		"DEVICE_STATE_IS_NOCOMMS":      3,
		"DEVICE_STATE_IS_MAINT":        4,
		"DEVICE_STATE_IS_REBOOTING":    5,
		"DEVICE_STATE_OOS_STOCKED":     6,
		"DEVICE_STATE_OOS_QUARANTINED": 7,
		"DEVICE_STATE_OOS_READY":       8,
		"DEVICE_STATE_OOS_NOCOMMS":     9,
		"DEVICE_STATE_OOS_DECOMM":      10,
		"DEVICE_STATE_OOS_MAINT":       11,
		"DEVICE_STATE_OOS_REBOOTING":   12,
		"DEVICE_STATE_ERROR":           13,
	}
)

func (x DeviceState) Enum() *DeviceState {
	p := new(DeviceState)
	*p = x
	return p
}

func (x DeviceState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceState) Descriptor() protoreflect.EnumDescriptor {
	return file_apstra_streaming_telemetry_proto_enumTypes[0].Descriptor()
}

func (DeviceState) Type() protoreflect.EnumType {
	return &file_apstra_streaming_telemetry_proto_enumTypes[0]
}

func (x DeviceState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DeviceState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DeviceState(num)
	return nil
}

// Deprecated: Use DeviceState.Descriptor instead.
func (DeviceState) EnumDescriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{0}
}

type Feature int32

const (
	Feature_FEATURE_UNKNOWN             Feature = 0
	Feature_FEATURE_LO0                 Feature = 1
	Feature_FEATURE_FABRIC              Feature = 2
	Feature_FEATURE_LEAF_SERVER         Feature = 3
	Feature_FEATURE_L3EDGE              Feature = 4
	Feature_FEATURE_L2EDGE              Feature = 5
	Feature_FEATURE_SPINE_LEAF          Feature = 6
	Feature_FEATURE_FABRIC_SPINE        Feature = 7
	Feature_FEATURE_EXTERNAL_ROUTER     Feature = 8
	Feature_FEATURE_TO_EXTERNAL_ROUTER  Feature = 9
	Feature_FEATURE_LEAF_L3_SERVER      Feature = 10
	Feature_FEATURE_LEAF_L2_SERVER      Feature = 11
	Feature_FEATURE_LEAF                Feature = 12
	Feature_FEATURE_SPINE               Feature = 13
	Feature_FEATURE_L3_SERVER           Feature = 14
	Feature_FEATURE_L2_SERVER           Feature = 15
	Feature_FEATURE_SERVER              Feature = 16
	Feature_FEATURE_PEER                Feature = 17
	Feature_FEATURE_LEAF_PEER_LINK      Feature = 18
	Feature_FEATURE_LEAF_PAIR           Feature = 19
	Feature_FEATURE_LEAF_PAIR_L2_SERVER Feature = 20
	Feature_FEATURE_UNUSED              Feature = 21
)

// Enum value maps for Feature.
var (
	Feature_name = map[int32]string{
		0:  "FEATURE_UNKNOWN",
		1:  "FEATURE_LO0",
		2:  "FEATURE_FABRIC",
		3:  "FEATURE_LEAF_SERVER",
		4:  "FEATURE_L3EDGE",
		5:  "FEATURE_L2EDGE",
		6:  "FEATURE_SPINE_LEAF",
		7:  "FEATURE_FABRIC_SPINE",
		8:  "FEATURE_EXTERNAL_ROUTER",
		9:  "FEATURE_TO_EXTERNAL_ROUTER",
		10: "FEATURE_LEAF_L3_SERVER",
		11: "FEATURE_LEAF_L2_SERVER",
		12: "FEATURE_LEAF",
		13: "FEATURE_SPINE",
		14: "FEATURE_L3_SERVER",
		15: "FEATURE_L2_SERVER",
		16: "FEATURE_SERVER",
		17: "FEATURE_PEER",
		18: "FEATURE_LEAF_PEER_LINK",
		19: "FEATURE_LEAF_PAIR",
		20: "FEATURE_LEAF_PAIR_L2_SERVER",
		21: "FEATURE_UNUSED",
	}
	Feature_value = map[string]int32{
		"FEATURE_UNKNOWN":             0,
		"FEATURE_LO0":                 1,
		"FEATURE_FABRIC":              2,
		"FEATURE_LEAF_SERVER":         3,
		"FEATURE_L3EDGE":              4,
		"FEATURE_L2EDGE":              5,
		"FEATURE_SPINE_LEAF":          6,
		"FEATURE_FABRIC_SPINE":        7,
		"FEATURE_EXTERNAL_ROUTER":     8,
		"FEATURE_TO_EXTERNAL_ROUTER":  9,
		"FEATURE_LEAF_L3_SERVER":      10,
		"FEATURE_LEAF_L2_SERVER":      11,
		"FEATURE_LEAF":                12,
		"FEATURE_SPINE":               13,
		"FEATURE_L3_SERVER":           14,
		"FEATURE_L2_SERVER":           15,
		"FEATURE_SERVER":              16,
		"FEATURE_PEER":                17,
		"FEATURE_LEAF_PEER_LINK":      18,
		"FEATURE_LEAF_PAIR":           19,
		"FEATURE_LEAF_PAIR_L2_SERVER": 20,
		"FEATURE_UNUSED":              21,
	}
)

func (x Feature) Enum() *Feature {
	p := new(Feature)
	*p = x
	return p
}

func (x Feature) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Feature) Descriptor() protoreflect.EnumDescriptor {
	return file_apstra_streaming_telemetry_proto_enumTypes[1].Descriptor()
}

func (Feature) Type() protoreflect.EnumType {
	return &file_apstra_streaming_telemetry_proto_enumTypes[1]
}

func (x Feature) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Feature) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Feature(num)
	return nil
}

// Deprecated: Use Feature.Descriptor instead.
func (Feature) EnumDescriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{1}
}

type StreamingType int32

const (
	StreamingType_STREAMING_TYPE_PERFMON StreamingType = 0
	StreamingType_STREAMING_TYPE_EVENTS  StreamingType = 1
	StreamingType_STREAMING_TYPE_ALERTS  StreamingType = 2
)

// Enum value maps for StreamingType.
var (
	StreamingType_name = map[int32]string{
		0: "STREAMING_TYPE_PERFMON",
		1: "STREAMING_TYPE_EVENTS",
		2: "STREAMING_TYPE_ALERTS",
	}
	StreamingType_value = map[string]int32{
		"STREAMING_TYPE_PERFMON": 0,
		"STREAMING_TYPE_EVENTS":  1,
		"STREAMING_TYPE_ALERTS":  2,
	}
)

func (x StreamingType) Enum() *StreamingType {
	p := new(StreamingType)
	*p = x
	return p
}

func (x StreamingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamingType) Descriptor() protoreflect.EnumDescriptor {
	return file_apstra_streaming_telemetry_proto_enumTypes[2].Descriptor()
}

func (StreamingType) Type() protoreflect.EnumType {
	return &file_apstra_streaming_telemetry_proto_enumTypes[2]
}

func (x StreamingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *StreamingType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = StreamingType(num)
	return nil
}

// Deprecated: Use StreamingType.Descriptor instead.
func (StreamingType) EnumDescriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{2}
}

type StreamingProtocol int32

const (
	StreamingProtocol_STREAMING_PROTOCOL_PROTOBUF_OVER_TCP StreamingProtocol = 0
)

// Enum value maps for StreamingProtocol.
var (
	StreamingProtocol_name = map[int32]string{
		0: "STREAMING_PROTOCOL_PROTOBUF_OVER_TCP",
	}
	StreamingProtocol_value = map[string]int32{
		"STREAMING_PROTOCOL_PROTOBUF_OVER_TCP": 0,
	}
)

func (x StreamingProtocol) Enum() *StreamingProtocol {
	p := new(StreamingProtocol)
	*p = x
	return p
}

func (x StreamingProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamingProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_apstra_streaming_telemetry_proto_enumTypes[3].Descriptor()
}

func (StreamingProtocol) Type() protoreflect.EnumType {
	return &file_apstra_streaming_telemetry_proto_enumTypes[3]
}

func (x StreamingProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *StreamingProtocol) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = StreamingProtocol(num)
	return nil
}

// Deprecated: Use StreamingProtocol.Descriptor instead.
func (StreamingProtocol) EnumDescriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{3}
}

type StreamingStatus int32

const (
	StreamingStatus_STREAMING_STATUS_UP   StreamingStatus = 0
	StreamingStatus_STREAMING_STATUS_DOWN StreamingStatus = 1
)

// Enum value maps for StreamingStatus.
var (
	StreamingStatus_name = map[int32]string{
		0: "STREAMING_STATUS_UP",
		1: "STREAMING_STATUS_DOWN",
	}
	StreamingStatus_value = map[string]int32{
		"STREAMING_STATUS_UP":   0,
		"STREAMING_STATUS_DOWN": 1,
	}
)

func (x StreamingStatus) Enum() *StreamingStatus {
	p := new(StreamingStatus)
	*p = x
	return p
}

func (x StreamingStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamingStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_apstra_streaming_telemetry_proto_enumTypes[4].Descriptor()
}

func (StreamingStatus) Type() protoreflect.EnumType {
	return &file_apstra_streaming_telemetry_proto_enumTypes[4]
}

func (x StreamingStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *StreamingStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = StreamingStatus(num)
	return nil
}

// Deprecated: Use StreamingStatus.Descriptor instead.
func (StreamingStatus) EnumDescriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{4}
}

type StreamingSequencingMode int32

const (
	StreamingSequencingMode_STREAMING_UNSEQUENCED StreamingSequencingMode = 0
	StreamingSequencingMode_STREAMING_SEQUENCED   StreamingSequencingMode = 1
)

// Enum value maps for StreamingSequencingMode.
var (
	StreamingSequencingMode_name = map[int32]string{
		0: "STREAMING_UNSEQUENCED",
		1: "STREAMING_SEQUENCED",
	}
	StreamingSequencingMode_value = map[string]int32{
		"STREAMING_UNSEQUENCED": 0,
		"STREAMING_SEQUENCED":   1,
	}
)

func (x StreamingSequencingMode) Enum() *StreamingSequencingMode {
	p := new(StreamingSequencingMode)
	*p = x
	return p
}

func (x StreamingSequencingMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamingSequencingMode) Descriptor() protoreflect.EnumDescriptor {
	return file_apstra_streaming_telemetry_proto_enumTypes[5].Descriptor()
}

func (StreamingSequencingMode) Type() protoreflect.EnumType {
	return &file_apstra_streaming_telemetry_proto_enumTypes[5]
}

func (x StreamingSequencingMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *StreamingSequencingMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = StreamingSequencingMode(num)
	return nil
}

// Deprecated: Use StreamingSequencingMode.Descriptor instead.
func (StreamingSequencingMode) EnumDescriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{5}
}

type BgpSessionAddressFamily int32

const (
	BgpSessionAddressFamily_IPV4 BgpSessionAddressFamily = 0
	BgpSessionAddressFamily_IPV6 BgpSessionAddressFamily = 1
	BgpSessionAddressFamily_EVPN BgpSessionAddressFamily = 2
)

// Enum value maps for BgpSessionAddressFamily.
var (
	BgpSessionAddressFamily_name = map[int32]string{
		0: "IPV4",
		1: "IPV6",
		2: "EVPN",
	}
	BgpSessionAddressFamily_value = map[string]int32{
		"IPV4": 0,
		"IPV6": 1,
		"EVPN": 2,
	}
)

func (x BgpSessionAddressFamily) Enum() *BgpSessionAddressFamily {
	p := new(BgpSessionAddressFamily)
	*p = x
	return p
}

func (x BgpSessionAddressFamily) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpSessionAddressFamily) Descriptor() protoreflect.EnumDescriptor {
	return file_apstra_streaming_telemetry_proto_enumTypes[6].Descriptor()
}

func (BgpSessionAddressFamily) Type() protoreflect.EnumType {
	return &file_apstra_streaming_telemetry_proto_enumTypes[6]
}

func (x BgpSessionAddressFamily) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BgpSessionAddressFamily) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BgpSessionAddressFamily(num)
	return nil
}

// Deprecated: Use BgpSessionAddressFamily.Descriptor instead.
func (BgpSessionAddressFamily) EnumDescriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{6}
}

type LinkStatus int32

const (
	LinkStatus_LINK_UP      LinkStatus = 0
	LinkStatus_LINK_DOWN    LinkStatus = 1
	LinkStatus_LINK_UNKNOWN LinkStatus = 2
	LinkStatus_LINK_MISSING LinkStatus = 3
)

// Enum value maps for LinkStatus.
var (
	LinkStatus_name = map[int32]string{
		0: "LINK_UP",
		1: "LINK_DOWN",
		2: "LINK_UNKNOWN",
		3: "LINK_MISSING",
	}
	LinkStatus_value = map[string]int32{
		"LINK_UP":      0,
		"LINK_DOWN":    1,
		"LINK_UNKNOWN": 2,
		"LINK_MISSING": 3,
	}
)

func (x LinkStatus) Enum() *LinkStatus {
	p := new(LinkStatus)
	*p = x
	return p
}

func (x LinkStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinkStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_apstra_streaming_telemetry_proto_enumTypes[7].Descriptor()
}

func (LinkStatus) Type() protoreflect.EnumType {
	return &file_apstra_streaming_telemetry_proto_enumTypes[7]
}

func (x LinkStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LinkStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LinkStatus(num)
	return nil
}

// Deprecated: Use LinkStatus.Descriptor instead.
func (LinkStatus) EnumDescriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{7}
}

type MacState int32

const (
	MacState_MAC_ADD    MacState = 0
	MacState_MAC_DELETE MacState = 1
	MacState_MAC_MOVE   MacState = 2
)

// Enum value maps for MacState.
var (
	MacState_name = map[int32]string{
		0: "MAC_ADD",
		1: "MAC_DELETE",
		2: "MAC_MOVE",
	}
	MacState_value = map[string]int32{
		"MAC_ADD":    0,
		"MAC_DELETE": 1,
		"MAC_MOVE":   2,
	}
)

func (x MacState) Enum() *MacState {
	p := new(MacState)
	*p = x
	return p
}

func (x MacState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MacState) Descriptor() protoreflect.EnumDescriptor {
	return file_apstra_streaming_telemetry_proto_enumTypes[8].Descriptor()
}

func (MacState) Type() protoreflect.EnumType {
	return &file_apstra_streaming_telemetry_proto_enumTypes[8]
}

func (x MacState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MacState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MacState(num)
	return nil
}

// Deprecated: Use MacState.Descriptor instead.
func (MacState) EnumDescriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{8}
}

type ArpState int32

const (
	ArpState_ARP_ADD    ArpState = 0
	ArpState_ARP_DELETE ArpState = 1
)

// Enum value maps for ArpState.
var (
	ArpState_name = map[int32]string{
		0: "ARP_ADD",
		1: "ARP_DELETE",
	}
	ArpState_value = map[string]int32{
		"ARP_ADD":    0,
		"ARP_DELETE": 1,
	}
)

func (x ArpState) Enum() *ArpState {
	p := new(ArpState)
	*p = x
	return p
}

func (x ArpState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArpState) Descriptor() protoreflect.EnumDescriptor {
	return file_apstra_streaming_telemetry_proto_enumTypes[9].Descriptor()
}

func (ArpState) Type() protoreflect.EnumType {
	return &file_apstra_streaming_telemetry_proto_enumTypes[9]
}

func (x ArpState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ArpState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ArpState(num)
	return nil
}

// Deprecated: Use ArpState.Descriptor instead.
func (ArpState) EnumDescriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{9}
}

type MlagDomainState int32

const (
	MlagDomainState_MLAG_UNKNOWN  MlagDomainState = 0
	MlagDomainState_MLAG_MISSING  MlagDomainState = 1
	MlagDomainState_MLAG_DISABLED MlagDomainState = 2
	MlagDomainState_MLAG_INACTIVE MlagDomainState = 3
	MlagDomainState_MLAG_ACTIVE   MlagDomainState = 4
)

// Enum value maps for MlagDomainState.
var (
	MlagDomainState_name = map[int32]string{
		0: "MLAG_UNKNOWN",
		1: "MLAG_MISSING",
		2: "MLAG_DISABLED",
		3: "MLAG_INACTIVE",
		4: "MLAG_ACTIVE",
	}
	MlagDomainState_value = map[string]int32{
		"MLAG_UNKNOWN":  0,
		"MLAG_MISSING":  1,
		"MLAG_DISABLED": 2,
		"MLAG_INACTIVE": 3,
		"MLAG_ACTIVE":   4,
	}
)

func (x MlagDomainState) Enum() *MlagDomainState {
	p := new(MlagDomainState)
	*p = x
	return p
}

func (x MlagDomainState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MlagDomainState) Descriptor() protoreflect.EnumDescriptor {
	return file_apstra_streaming_telemetry_proto_enumTypes[10].Descriptor()
}

func (MlagDomainState) Type() protoreflect.EnumType {
	return &file_apstra_streaming_telemetry_proto_enumTypes[10]
}

func (x MlagDomainState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MlagDomainState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MlagDomainState(num)
	return nil
}

// Deprecated: Use MlagDomainState.Descriptor instead.
func (MlagDomainState) EnumDescriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{10}
}

type MlagIntfState int32

const (
	MlagIntfState_MLAG_INTF_UNKNOWN        MlagIntfState = 0
	MlagIntfState_MLAG_INTF_MISSING        MlagIntfState = 1
	MlagIntfState_MLAG_INTF_DISABLED       MlagIntfState = 2
	MlagIntfState_MLAG_INTF_CONFIGURED     MlagIntfState = 3
	MlagIntfState_MLAG_INTF_INACTIVE       MlagIntfState = 4
	MlagIntfState_MLAG_INTF_ACTIVE_PARTIAL MlagIntfState = 5
	MlagIntfState_MLAG_INTF_ACTIVE_FULL    MlagIntfState = 6
)

// Enum value maps for MlagIntfState.
var (
	MlagIntfState_name = map[int32]string{
		0: "MLAG_INTF_UNKNOWN",
		1: "MLAG_INTF_MISSING",
		2: "MLAG_INTF_DISABLED",
		3: "MLAG_INTF_CONFIGURED",
		4: "MLAG_INTF_INACTIVE",
		5: "MLAG_INTF_ACTIVE_PARTIAL",
		6: "MLAG_INTF_ACTIVE_FULL",
	}
	MlagIntfState_value = map[string]int32{
		"MLAG_INTF_UNKNOWN":        0,
		"MLAG_INTF_MISSING":        1,
		"MLAG_INTF_DISABLED":       2,
		"MLAG_INTF_CONFIGURED":     3,
		"MLAG_INTF_INACTIVE":       4,
		"MLAG_INTF_ACTIVE_PARTIAL": 5,
		"MLAG_INTF_ACTIVE_FULL":    6,
	}
)

func (x MlagIntfState) Enum() *MlagIntfState {
	p := new(MlagIntfState)
	*p = x
	return p
}

func (x MlagIntfState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MlagIntfState) Descriptor() protoreflect.EnumDescriptor {
	return file_apstra_streaming_telemetry_proto_enumTypes[11].Descriptor()
}

func (MlagIntfState) Type() protoreflect.EnumType {
	return &file_apstra_streaming_telemetry_proto_enumTypes[11]
}

func (x MlagIntfState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MlagIntfState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MlagIntfState(num)
	return nil
}

// Deprecated: Use MlagIntfState.Descriptor instead.
func (MlagIntfState) EnumDescriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{11}
}

type RouteState int32

const (
	RouteState_ROUTE_ADD    RouteState = 0
	RouteState_ROUTE_DELETE RouteState = 1
)

// Enum value maps for RouteState.
var (
	RouteState_name = map[int32]string{
		0: "ROUTE_ADD",
		1: "ROUTE_DELETE",
	}
	RouteState_value = map[string]int32{
		"ROUTE_ADD":    0,
		"ROUTE_DELETE": 1,
	}
)

func (x RouteState) Enum() *RouteState {
	p := new(RouteState)
	*p = x
	return p
}

func (x RouteState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RouteState) Descriptor() protoreflect.EnumDescriptor {
	return file_apstra_streaming_telemetry_proto_enumTypes[12].Descriptor()
}

func (RouteState) Type() protoreflect.EnumType {
	return &file_apstra_streaming_telemetry_proto_enumTypes[12]
}

func (x RouteState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RouteState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RouteState(num)
	return nil
}

// Deprecated: Use RouteState.Descriptor instead.
func (RouteState) EnumDescriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{12}
}

type AlertSeverity int32

const (
	AlertSeverity_ALERT_LOW      AlertSeverity = 0
	AlertSeverity_ALERT_MEDIUM   AlertSeverity = 1
	AlertSeverity_ALERT_HIGH     AlertSeverity = 2
	AlertSeverity_ALERT_CRITICAL AlertSeverity = 3
)

// Enum value maps for AlertSeverity.
var (
	AlertSeverity_name = map[int32]string{
		0: "ALERT_LOW",
		1: "ALERT_MEDIUM",
		2: "ALERT_HIGH",
		3: "ALERT_CRITICAL",
	}
	AlertSeverity_value = map[string]int32{
		"ALERT_LOW":      0,
		"ALERT_MEDIUM":   1,
		"ALERT_HIGH":     2,
		"ALERT_CRITICAL": 3,
	}
)

func (x AlertSeverity) Enum() *AlertSeverity {
	p := new(AlertSeverity)
	*p = x
	return p
}

func (x AlertSeverity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlertSeverity) Descriptor() protoreflect.EnumDescriptor {
	return file_apstra_streaming_telemetry_proto_enumTypes[13].Descriptor()
}

func (AlertSeverity) Type() protoreflect.EnumType {
	return &file_apstra_streaming_telemetry_proto_enumTypes[13]
}

func (x AlertSeverity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AlertSeverity) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AlertSeverity(num)
	return nil
}

// Deprecated: Use AlertSeverity.Descriptor instead.
func (AlertSeverity) EnumDescriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{13}
}

type RouteEntryStatus int32

const (
	RouteEntryStatus_ROUTE_ENTRY_STATUS_UNKNOWN RouteEntryStatus = 0
	RouteEntryStatus_ROUTE_ENTRY_STATUS_UP      RouteEntryStatus = 1
	RouteEntryStatus_ROUTE_ENTRY_STATUS_PARTIAL RouteEntryStatus = 2
	RouteEntryStatus_ROUTE_ENTRY_STATUS_MISSING RouteEntryStatus = 3
)

// Enum value maps for RouteEntryStatus.
var (
	RouteEntryStatus_name = map[int32]string{
		0: "ROUTE_ENTRY_STATUS_UNKNOWN",
		1: "ROUTE_ENTRY_STATUS_UP",
		2: "ROUTE_ENTRY_STATUS_PARTIAL",
		3: "ROUTE_ENTRY_STATUS_MISSING",
	}
	RouteEntryStatus_value = map[string]int32{
		"ROUTE_ENTRY_STATUS_UNKNOWN": 0,
		"ROUTE_ENTRY_STATUS_UP":      1,
		"ROUTE_ENTRY_STATUS_PARTIAL": 2,
		"ROUTE_ENTRY_STATUS_MISSING": 3,
	}
)

func (x RouteEntryStatus) Enum() *RouteEntryStatus {
	p := new(RouteEntryStatus)
	*p = x
	return p
}

func (x RouteEntryStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RouteEntryStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_apstra_streaming_telemetry_proto_enumTypes[14].Descriptor()
}

func (RouteEntryStatus) Type() protoreflect.EnumType {
	return &file_apstra_streaming_telemetry_proto_enumTypes[14]
}

func (x RouteEntryStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RouteEntryStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RouteEntryStatus(num)
	return nil
}

// Deprecated: Use RouteEntryStatus.Descriptor instead.
func (RouteEntryStatus) EnumDescriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{14}
}

type NextHopStatus int32

const (
	NextHopStatus_NEXT_HOP_STATUS_UNKNOWN NextHopStatus = 0
	NextHopStatus_NEXT_HOP_STATUS_UP      NextHopStatus = 1
	NextHopStatus_NEXT_HOP_STATUS_MISSING NextHopStatus = 2
)

// Enum value maps for NextHopStatus.
var (
	NextHopStatus_name = map[int32]string{
		0: "NEXT_HOP_STATUS_UNKNOWN",
		1: "NEXT_HOP_STATUS_UP",
		2: "NEXT_HOP_STATUS_MISSING",
	}
	NextHopStatus_value = map[string]int32{
		"NEXT_HOP_STATUS_UNKNOWN": 0,
		"NEXT_HOP_STATUS_UP":      1,
		"NEXT_HOP_STATUS_MISSING": 2,
	}
)

func (x NextHopStatus) Enum() *NextHopStatus {
	p := new(NextHopStatus)
	*p = x
	return p
}

func (x NextHopStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NextHopStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_apstra_streaming_telemetry_proto_enumTypes[15].Descriptor()
}

func (NextHopStatus) Type() protoreflect.EnumType {
	return &file_apstra_streaming_telemetry_proto_enumTypes[15]
}

func (x NextHopStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *NextHopStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = NextHopStatus(num)
	return nil
}

// Deprecated: Use NextHopStatus.Descriptor instead.
func (NextHopStatus) EnumDescriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{15}
}

type RouteType int32

const (
	RouteType_ROUTE_TYPE_UNKNOWN RouteType = 0
	RouteType_ROUTE_TYPE_DIRECT  RouteType = 1
	RouteType_ROUTE_TYPE_BGP     RouteType = 2
	RouteType_ROUTE_TYPE_STAT    RouteType = 3
)

// Enum value maps for RouteType.
var (
	RouteType_name = map[int32]string{
		0: "ROUTE_TYPE_UNKNOWN",
		1: "ROUTE_TYPE_DIRECT",
		2: "ROUTE_TYPE_BGP",
		3: "ROUTE_TYPE_STAT",
	}
	RouteType_value = map[string]int32{
		"ROUTE_TYPE_UNKNOWN": 0,
		"ROUTE_TYPE_DIRECT":  1,
		"ROUTE_TYPE_BGP":     2,
		"ROUTE_TYPE_STAT":    3,
	}
)

func (x RouteType) Enum() *RouteType {
	p := new(RouteType)
	*p = x
	return p
}

func (x RouteType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RouteType) Descriptor() protoreflect.EnumDescriptor {
	return file_apstra_streaming_telemetry_proto_enumTypes[16].Descriptor()
}

func (RouteType) Type() protoreflect.EnumType {
	return &file_apstra_streaming_telemetry_proto_enumTypes[16]
}

func (x RouteType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RouteType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RouteType(num)
	return nil
}

// Deprecated: Use RouteType.Descriptor instead.
func (RouteType) EnumDescriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{16}
}

type DeploymentStatus int32

const (
	DeploymentStatus_DEPLOYMENT_STATUS_INPROGRESS DeploymentStatus = 0
	DeploymentStatus_DEPLOYMENT_STATUS_SUCCEEDED  DeploymentStatus = 1
	DeploymentStatus_DEPLOYMENT_STATUS_FAILED     DeploymentStatus = 2
)

// Enum value maps for DeploymentStatus.
var (
	DeploymentStatus_name = map[int32]string{
		0: "DEPLOYMENT_STATUS_INPROGRESS",
		1: "DEPLOYMENT_STATUS_SUCCEEDED",
		2: "DEPLOYMENT_STATUS_FAILED",
	}
	DeploymentStatus_value = map[string]int32{
		"DEPLOYMENT_STATUS_INPROGRESS": 0,
		"DEPLOYMENT_STATUS_SUCCEEDED":  1,
		"DEPLOYMENT_STATUS_FAILED":     2,
	}
)

func (x DeploymentStatus) Enum() *DeploymentStatus {
	p := new(DeploymentStatus)
	*p = x
	return p
}

func (x DeploymentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeploymentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_apstra_streaming_telemetry_proto_enumTypes[17].Descriptor()
}

func (DeploymentStatus) Type() protoreflect.EnumType {
	return &file_apstra_streaming_telemetry_proto_enumTypes[17]
}

func (x DeploymentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DeploymentStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DeploymentStatus(num)
	return nil
}

// Deprecated: Use DeploymentStatus.Descriptor instead.
func (DeploymentStatus) EnumDescriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{17}
}

type StreamingAlertReason int32

const (
	StreamingAlertReason_STREAMING_ALERT_REASON_FAILED_CONNECTION StreamingAlertReason = 0
	StreamingAlertReason_STREAMING_ALERT_REASON_TIMEOUT           StreamingAlertReason = 1
	StreamingAlertReason_STREAMING_ALERT_REASON_DNS_FAILURE       StreamingAlertReason = 2
	StreamingAlertReason_STREAMING_ALERT_REASON_WRITE_TIMEOUT     StreamingAlertReason = 3
)

// Enum value maps for StreamingAlertReason.
var (
	StreamingAlertReason_name = map[int32]string{
		0: "STREAMING_ALERT_REASON_FAILED_CONNECTION",
		1: "STREAMING_ALERT_REASON_TIMEOUT",
		2: "STREAMING_ALERT_REASON_DNS_FAILURE",
		3: "STREAMING_ALERT_REASON_WRITE_TIMEOUT",
	}
	StreamingAlertReason_value = map[string]int32{
		"STREAMING_ALERT_REASON_FAILED_CONNECTION": 0,
		"STREAMING_ALERT_REASON_TIMEOUT":           1,
		"STREAMING_ALERT_REASON_DNS_FAILURE":       2,
		"STREAMING_ALERT_REASON_WRITE_TIMEOUT":     3,
	}
)

func (x StreamingAlertReason) Enum() *StreamingAlertReason {
	p := new(StreamingAlertReason)
	*p = x
	return p
}

func (x StreamingAlertReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamingAlertReason) Descriptor() protoreflect.EnumDescriptor {
	return file_apstra_streaming_telemetry_proto_enumTypes[18].Descriptor()
}

func (StreamingAlertReason) Type() protoreflect.EnumType {
	return &file_apstra_streaming_telemetry_proto_enumTypes[18]
}

func (x StreamingAlertReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *StreamingAlertReason) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = StreamingAlertReason(num)
	return nil
}

// Deprecated: Use StreamingAlertReason.Descriptor instead.
func (StreamingAlertReason) EnumDescriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{18}
}

type BgpSessionState int32

const (
	BgpSessionState_BGP_SESSION_UP      BgpSessionState = 0
	BgpSessionState_BGP_SESSION_DOWN    BgpSessionState = 1
	BgpSessionState_BGP_SESSION_MISSING BgpSessionState = 2
	BgpSessionState_BGP_SESSION_UNKNOWN BgpSessionState = 3
)

// Enum value maps for BgpSessionState.
var (
	BgpSessionState_name = map[int32]string{
		0: "BGP_SESSION_UP",
		1: "BGP_SESSION_DOWN",
		2: "BGP_SESSION_MISSING",
		3: "BGP_SESSION_UNKNOWN",
	}
	BgpSessionState_value = map[string]int32{
		"BGP_SESSION_UP":      0,
		"BGP_SESSION_DOWN":    1,
		"BGP_SESSION_MISSING": 2,
		"BGP_SESSION_UNKNOWN": 3,
	}
)

func (x BgpSessionState) Enum() *BgpSessionState {
	p := new(BgpSessionState)
	*p = x
	return p
}

func (x BgpSessionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpSessionState) Descriptor() protoreflect.EnumDescriptor {
	return file_apstra_streaming_telemetry_proto_enumTypes[19].Descriptor()
}

func (BgpSessionState) Type() protoreflect.EnumType {
	return &file_apstra_streaming_telemetry_proto_enumTypes[19]
}

func (x BgpSessionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BgpSessionState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BgpSessionState(num)
	return nil
}

// Deprecated: Use BgpSessionState.Descriptor instead.
func (BgpSessionState) EnumDescriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{19}
}

type AggregationType int32

const (
	AggregationType_AGGREGATION_TYPE_MAX AggregationType = 1
	AggregationType_AGGREGATION_TYPE_MIN AggregationType = 2
	AggregationType_AGGREGATION_TYPE_SUM AggregationType = 3
	AggregationType_AGGREGATION_TYPE_AVG AggregationType = 4
	AggregationType_AGGREGATION_TYPE_STD AggregationType = 5
)

// Enum value maps for AggregationType.
var (
	AggregationType_name = map[int32]string{
		1: "AGGREGATION_TYPE_MAX",
		2: "AGGREGATION_TYPE_MIN",
		3: "AGGREGATION_TYPE_SUM",
		4: "AGGREGATION_TYPE_AVG",
		5: "AGGREGATION_TYPE_STD",
	}
	AggregationType_value = map[string]int32{
		"AGGREGATION_TYPE_MAX": 1,
		"AGGREGATION_TYPE_MIN": 2,
		"AGGREGATION_TYPE_SUM": 3,
		"AGGREGATION_TYPE_AVG": 4,
		"AGGREGATION_TYPE_STD": 5,
	}
)

func (x AggregationType) Enum() *AggregationType {
	p := new(AggregationType)
	*p = x
	return p
}

func (x AggregationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AggregationType) Descriptor() protoreflect.EnumDescriptor {
	return file_apstra_streaming_telemetry_proto_enumTypes[20].Descriptor()
}

func (AggregationType) Type() protoreflect.EnumType {
	return &file_apstra_streaming_telemetry_proto_enumTypes[20]
}

func (x AggregationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AggregationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AggregationType(num)
	return nil
}

// Deprecated: Use AggregationType.Descriptor instead.
func (AggregationType) EnumDescriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{20}
}

type HeadroomType int32

const (
	HeadroomType_HEADROOM_TYPE_MAX HeadroomType = 1
	HeadroomType_HEADROOM_TYPE_MIN HeadroomType = 2
)

// Enum value maps for HeadroomType.
var (
	HeadroomType_name = map[int32]string{
		1: "HEADROOM_TYPE_MAX",
		2: "HEADROOM_TYPE_MIN",
	}
	HeadroomType_value = map[string]int32{
		"HEADROOM_TYPE_MAX": 1,
		"HEADROOM_TYPE_MIN": 2,
	}
)

func (x HeadroomType) Enum() *HeadroomType {
	p := new(HeadroomType)
	*p = x
	return p
}

func (x HeadroomType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HeadroomType) Descriptor() protoreflect.EnumDescriptor {
	return file_apstra_streaming_telemetry_proto_enumTypes[21].Descriptor()
}

func (HeadroomType) Type() protoreflect.EnumType {
	return &file_apstra_streaming_telemetry_proto_enumTypes[21]
}

func (x HeadroomType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *HeadroomType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = HeadroomType(num)
	return nil
}

// Deprecated: Use HeadroomType.Descriptor instead.
func (HeadroomType) EnumDescriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{21}
}

type DeviceStateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *DeviceState `protobuf:"varint,1,req,name=state,enum=aos.streaming.DeviceState" json:"state,omitempty"`
}

func (x *DeviceStateEvent) Reset() {
	*x = DeviceStateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceStateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceStateEvent) ProtoMessage() {}

func (x *DeviceStateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceStateEvent.ProtoReflect.Descriptor instead.
func (*DeviceStateEvent) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{0}
}

func (x *DeviceStateEvent) GetState() DeviceState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return DeviceState_DEVICE_STATE_IS_ACTIVE
}

type TrafficEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Source:
	//	*TrafficEvent_NodeRole
	//	*TrafficEvent_PortRole
	//	*TrafficEvent_Port
	//	*TrafficEvent_Node
	//	*TrafficEvent_Pod
	Source          isTrafficEvent_Source `protobuf_oneof:"source"`
	IntervalSeconds *uint32               `protobuf:"varint,6,req,name=interval_seconds,json=intervalSeconds" json:"interval_seconds,omitempty"`
	MeasurementName *string               `protobuf:"bytes,7,req,name=measurement_name,json=measurementName" json:"measurement_name,omitempty"`
	AggregationType *AggregationType      `protobuf:"varint,8,req,name=aggregation_type,json=aggregationType,enum=aos.streaming.AggregationType" json:"aggregation_type,omitempty"`
	// Types that are assignable to Delta:
	//	*TrafficEvent_DeltaPercentage
	//	*TrafficEvent_DeltaNonnormalized
	Delta isTrafficEvent_Delta `protobuf_oneof:"delta"`
}

func (x *TrafficEvent) Reset() {
	*x = TrafficEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficEvent) ProtoMessage() {}

func (x *TrafficEvent) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficEvent.ProtoReflect.Descriptor instead.
func (*TrafficEvent) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{1}
}

func (m *TrafficEvent) GetSource() isTrafficEvent_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *TrafficEvent) GetNodeRole() Feature {
	if x, ok := x.GetSource().(*TrafficEvent_NodeRole); ok {
		return x.NodeRole
	}
	return Feature_FEATURE_UNKNOWN
}

func (x *TrafficEvent) GetPortRole() Feature {
	if x, ok := x.GetSource().(*TrafficEvent_PortRole); ok {
		return x.PortRole
	}
	return Feature_FEATURE_UNKNOWN
}

func (x *TrafficEvent) GetPort() string {
	if x, ok := x.GetSource().(*TrafficEvent_Port); ok {
		return x.Port
	}
	return ""
}

func (x *TrafficEvent) GetNode() string {
	if x, ok := x.GetSource().(*TrafficEvent_Node); ok {
		return x.Node
	}
	return ""
}

func (x *TrafficEvent) GetPod() bool {
	if x, ok := x.GetSource().(*TrafficEvent_Pod); ok {
		return x.Pod
	}
	return false
}

func (x *TrafficEvent) GetIntervalSeconds() uint32 {
	if x != nil && x.IntervalSeconds != nil {
		return *x.IntervalSeconds
	}
	return 0
}

func (x *TrafficEvent) GetMeasurementName() string {
	if x != nil && x.MeasurementName != nil {
		return *x.MeasurementName
	}
	return ""
}

func (x *TrafficEvent) GetAggregationType() AggregationType {
	if x != nil && x.AggregationType != nil {
		return *x.AggregationType
	}
	return AggregationType_AGGREGATION_TYPE_MAX
}

func (m *TrafficEvent) GetDelta() isTrafficEvent_Delta {
	if m != nil {
		return m.Delta
	}
	return nil
}

func (x *TrafficEvent) GetDeltaPercentage() int32 {
	if x, ok := x.GetDelta().(*TrafficEvent_DeltaPercentage); ok {
		return x.DeltaPercentage
	}
	return 0
}

func (x *TrafficEvent) GetDeltaNonnormalized() int64 {
	if x, ok := x.GetDelta().(*TrafficEvent_DeltaNonnormalized); ok {
		return x.DeltaNonnormalized
	}
	return 0
}

type isTrafficEvent_Source interface {
	isTrafficEvent_Source()
}

type TrafficEvent_NodeRole struct {
	NodeRole Feature `protobuf:"varint,1,opt,name=node_role,json=nodeRole,enum=aos.streaming.Feature,oneof"`
}

type TrafficEvent_PortRole struct {
	PortRole Feature `protobuf:"varint,2,opt,name=port_role,json=portRole,enum=aos.streaming.Feature,oneof"`
}

type TrafficEvent_Port struct {
	Port string `protobuf:"bytes,3,opt,name=port,oneof"`
}

type TrafficEvent_Node struct {
	Node string `protobuf:"bytes,4,opt,name=node,oneof"`
}

type TrafficEvent_Pod struct {
	Pod bool `protobuf:"varint,5,opt,name=pod,oneof"`
}

func (*TrafficEvent_NodeRole) isTrafficEvent_Source() {}

func (*TrafficEvent_PortRole) isTrafficEvent_Source() {}

func (*TrafficEvent_Port) isTrafficEvent_Source() {}

func (*TrafficEvent_Node) isTrafficEvent_Source() {}

func (*TrafficEvent_Pod) isTrafficEvent_Source() {}

type isTrafficEvent_Delta interface {
	isTrafficEvent_Delta()
}

type TrafficEvent_DeltaPercentage struct {
	DeltaPercentage int32 `protobuf:"varint,9,opt,name=delta_percentage,json=deltaPercentage,oneof"`
}

type TrafficEvent_DeltaNonnormalized struct {
	DeltaNonnormalized int64 `protobuf:"varint,10,opt,name=delta_nonnormalized,json=deltaNonnormalized,oneof"`
}

func (*TrafficEvent_DeltaPercentage) isTrafficEvent_Delta() {}

func (*TrafficEvent_DeltaNonnormalized) isTrafficEvent_Delta() {}

type StreamingEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AosServer      *string                  `protobuf:"bytes,1,req,name=aos_server,json=aosServer" json:"aos_server,omitempty"` // hostname of AOS-server
	StreamingType  *StreamingType           `protobuf:"varint,2,req,name=streaming_type,json=streamingType,enum=aos.streaming.StreamingType" json:"streaming_type,omitempty"`
	Protocol       *StreamingProtocol       `protobuf:"varint,3,req,name=protocol,enum=aos.streaming.StreamingProtocol" json:"protocol,omitempty"`
	Status         *StreamingStatus         `protobuf:"varint,4,req,name=status,enum=aos.streaming.StreamingStatus" json:"status,omitempty"`
	SequencingMode *StreamingSequencingMode `protobuf:"varint,5,opt,name=sequencing_mode,json=sequencingMode,enum=aos.streaming.StreamingSequencingMode" json:"sequencing_mode,omitempty"`
}

func (x *StreamingEvent) Reset() {
	*x = StreamingEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingEvent) ProtoMessage() {}

func (x *StreamingEvent) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingEvent.ProtoReflect.Descriptor instead.
func (*StreamingEvent) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{2}
}

func (x *StreamingEvent) GetAosServer() string {
	if x != nil && x.AosServer != nil {
		return *x.AosServer
	}
	return ""
}

func (x *StreamingEvent) GetStreamingType() StreamingType {
	if x != nil && x.StreamingType != nil {
		return *x.StreamingType
	}
	return StreamingType_STREAMING_TYPE_PERFMON
}

func (x *StreamingEvent) GetProtocol() StreamingProtocol {
	if x != nil && x.Protocol != nil {
		return *x.Protocol
	}
	return StreamingProtocol_STREAMING_PROTOCOL_PROTOBUF_OVER_TCP
}

func (x *StreamingEvent) GetStatus() StreamingStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return StreamingStatus_STREAMING_STATUS_UP
}

func (x *StreamingEvent) GetSequencingMode() StreamingSequencingMode {
	if x != nil && x.SequencingMode != nil {
		return *x.SequencingMode
	}
	return StreamingSequencingMode_STREAMING_UNSEQUENCED
}

type CablePeerEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LclDeviceId *string `protobuf:"bytes,1,req,name=lcl_device_id,json=lclDeviceId" json:"lcl_device_id,omitempty"`
	LclHostname *string `protobuf:"bytes,2,req,name=lcl_hostname,json=lclHostname" json:"lcl_hostname,omitempty"`
	LclIfname   *string `protobuf:"bytes,3,req,name=lcl_ifname,json=lclIfname" json:"lcl_ifname,omitempty"`
	RmtHostname *string `protobuf:"bytes,4,req,name=rmt_hostname,json=rmtHostname" json:"rmt_hostname,omitempty"`
	RmtIfname   *string `protobuf:"bytes,5,req,name=rmt_ifname,json=rmtIfname" json:"rmt_ifname,omitempty"`
	RmtSysdescr *string `protobuf:"bytes,6,req,name=rmt_sysdescr,json=rmtSysdescr" json:"rmt_sysdescr,omitempty"`
}

func (x *CablePeerEvent) Reset() {
	*x = CablePeerEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CablePeerEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CablePeerEvent) ProtoMessage() {}

func (x *CablePeerEvent) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CablePeerEvent.ProtoReflect.Descriptor instead.
func (*CablePeerEvent) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{3}
}

func (x *CablePeerEvent) GetLclDeviceId() string {
	if x != nil && x.LclDeviceId != nil {
		return *x.LclDeviceId
	}
	return ""
}

func (x *CablePeerEvent) GetLclHostname() string {
	if x != nil && x.LclHostname != nil {
		return *x.LclHostname
	}
	return ""
}

func (x *CablePeerEvent) GetLclIfname() string {
	if x != nil && x.LclIfname != nil {
		return *x.LclIfname
	}
	return ""
}

func (x *CablePeerEvent) GetRmtHostname() string {
	if x != nil && x.RmtHostname != nil {
		return *x.RmtHostname
	}
	return ""
}

func (x *CablePeerEvent) GetRmtIfname() string {
	if x != nil && x.RmtIfname != nil {
		return *x.RmtIfname
	}
	return ""
}

func (x *CablePeerEvent) GetRmtSysdescr() string {
	if x != nil && x.RmtSysdescr != nil {
		return *x.RmtSysdescr
	}
	return ""
}

type BGPNeighborEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LclHostname *string                  `protobuf:"bytes,1,req,name=lcl_hostname,json=lclHostname" json:"lcl_hostname,omitempty"`
	LclIpaddr   *string                  `protobuf:"bytes,2,req,name=lcl_ipaddr,json=lclIpaddr" json:"lcl_ipaddr,omitempty"`
	LclAsn      *uint32                  `protobuf:"varint,3,req,name=lcl_asn,json=lclAsn" json:"lcl_asn,omitempty"`
	State       *BgpSessionState         `protobuf:"varint,4,req,name=state,enum=aos.streaming.BgpSessionState" json:"state,omitempty"`
	RmtIpaddr   *string                  `protobuf:"bytes,5,req,name=rmt_ipaddr,json=rmtIpaddr" json:"rmt_ipaddr,omitempty"`
	RmtAsn      *uint32                  `protobuf:"varint,6,req,name=rmt_asn,json=rmtAsn" json:"rmt_asn,omitempty"`
	VrfName     *string                  `protobuf:"bytes,7,req,name=vrf_name,json=vrfName" json:"vrf_name,omitempty"`
	AddrFamily  *BgpSessionAddressFamily `protobuf:"varint,8,req,name=addr_family,json=addrFamily,enum=aos.streaming.BgpSessionAddressFamily" json:"addr_family,omitempty"`
}

func (x *BGPNeighborEvent) Reset() {
	*x = BGPNeighborEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BGPNeighborEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BGPNeighborEvent) ProtoMessage() {}

func (x *BGPNeighborEvent) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BGPNeighborEvent.ProtoReflect.Descriptor instead.
func (*BGPNeighborEvent) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{4}
}

func (x *BGPNeighborEvent) GetLclHostname() string {
	if x != nil && x.LclHostname != nil {
		return *x.LclHostname
	}
	return ""
}

func (x *BGPNeighborEvent) GetLclIpaddr() string {
	if x != nil && x.LclIpaddr != nil {
		return *x.LclIpaddr
	}
	return ""
}

func (x *BGPNeighborEvent) GetLclAsn() uint32 {
	if x != nil && x.LclAsn != nil {
		return *x.LclAsn
	}
	return 0
}

func (x *BGPNeighborEvent) GetState() BgpSessionState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return BgpSessionState_BGP_SESSION_UP
}

func (x *BGPNeighborEvent) GetRmtIpaddr() string {
	if x != nil && x.RmtIpaddr != nil {
		return *x.RmtIpaddr
	}
	return ""
}

func (x *BGPNeighborEvent) GetRmtAsn() uint32 {
	if x != nil && x.RmtAsn != nil {
		return *x.RmtAsn
	}
	return 0
}

func (x *BGPNeighborEvent) GetVrfName() string {
	if x != nil && x.VrfName != nil {
		return *x.VrfName
	}
	return ""
}

func (x *BGPNeighborEvent) GetAddrFamily() BgpSessionAddressFamily {
	if x != nil && x.AddrFamily != nil {
		return *x.AddrFamily
	}
	return BgpSessionAddressFamily_IPV4
}

type LinkStatusEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname *string     `protobuf:"bytes,1,req,name=hostname" json:"hostname,omitempty"`
	Ifname   *string     `protobuf:"bytes,2,req,name=ifname" json:"ifname,omitempty"`
	State    *LinkStatus `protobuf:"varint,3,req,name=state,enum=aos.streaming.LinkStatus" json:"state,omitempty"`
}

func (x *LinkStatusEvent) Reset() {
	*x = LinkStatusEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkStatusEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkStatusEvent) ProtoMessage() {}

func (x *LinkStatusEvent) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkStatusEvent.ProtoReflect.Descriptor instead.
func (*LinkStatusEvent) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{5}
}

func (x *LinkStatusEvent) GetHostname() string {
	if x != nil && x.Hostname != nil {
		return *x.Hostname
	}
	return ""
}

func (x *LinkStatusEvent) GetIfname() string {
	if x != nil && x.Ifname != nil {
		return *x.Ifname
	}
	return ""
}

func (x *LinkStatusEvent) GetState() LinkStatus {
	if x != nil && x.State != nil {
		return *x.State
	}
	return LinkStatus_LINK_UP
}

type MacEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Macaddress *string   `protobuf:"bytes,1,req,name=macaddress" json:"macaddress,omitempty"`
	Intfname   *string   `protobuf:"bytes,2,req,name=intfname" json:"intfname,omitempty"`
	Vlan       *uint32   `protobuf:"varint,3,req,name=vlan" json:"vlan,omitempty"`
	State      *MacState `protobuf:"varint,4,req,name=state,enum=aos.streaming.MacState" json:"state,omitempty"`
}

func (x *MacEvent) Reset() {
	*x = MacEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacEvent) ProtoMessage() {}

func (x *MacEvent) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacEvent.ProtoReflect.Descriptor instead.
func (*MacEvent) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{6}
}

func (x *MacEvent) GetMacaddress() string {
	if x != nil && x.Macaddress != nil {
		return *x.Macaddress
	}
	return ""
}

func (x *MacEvent) GetIntfname() string {
	if x != nil && x.Intfname != nil {
		return *x.Intfname
	}
	return ""
}

func (x *MacEvent) GetVlan() uint32 {
	if x != nil && x.Vlan != nil {
		return *x.Vlan
	}
	return 0
}

func (x *MacEvent) GetState() MacState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return MacState_MAC_ADD
}

type ArpEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipaddress *string   `protobuf:"bytes,1,req,name=ipaddress" json:"ipaddress,omitempty"`
	Mac       *string   `protobuf:"bytes,2,req,name=mac" json:"mac,omitempty"`
	Intfname  *string   `protobuf:"bytes,3,req,name=intfname" json:"intfname,omitempty"`
	State     *ArpState `protobuf:"varint,4,req,name=state,enum=aos.streaming.ArpState" json:"state,omitempty"`
	Vrfname   *string   `protobuf:"bytes,5,req,name=vrfname" json:"vrfname,omitempty"`
}

func (x *ArpEvent) Reset() {
	*x = ArpEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArpEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArpEvent) ProtoMessage() {}

func (x *ArpEvent) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArpEvent.ProtoReflect.Descriptor instead.
func (*ArpEvent) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{7}
}

func (x *ArpEvent) GetIpaddress() string {
	if x != nil && x.Ipaddress != nil {
		return *x.Ipaddress
	}
	return ""
}

func (x *ArpEvent) GetMac() string {
	if x != nil && x.Mac != nil {
		return *x.Mac
	}
	return ""
}

func (x *ArpEvent) GetIntfname() string {
	if x != nil && x.Intfname != nil {
		return *x.Intfname
	}
	return ""
}

func (x *ArpEvent) GetState() ArpState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ArpState_ARP_ADD
}

func (x *ArpEvent) GetVrfname() string {
	if x != nil && x.Vrfname != nil {
		return *x.Vrfname
	}
	return ""
}

type LagEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname          *string  `protobuf:"bytes,1,req,name=hostname" json:"hostname,omitempty"`
	Lagname           *string  `protobuf:"bytes,2,req,name=lagname" json:"lagname,omitempty"`
	Interfacesupcount *uint32  `protobuf:"varint,3,req,name=interfacesupcount" json:"interfacesupcount,omitempty"`
	Interfacesup      []string `protobuf:"bytes,4,rep,name=interfacesup" json:"interfacesup,omitempty"`
}

func (x *LagEvent) Reset() {
	*x = LagEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LagEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LagEvent) ProtoMessage() {}

func (x *LagEvent) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LagEvent.ProtoReflect.Descriptor instead.
func (*LagEvent) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{8}
}

func (x *LagEvent) GetHostname() string {
	if x != nil && x.Hostname != nil {
		return *x.Hostname
	}
	return ""
}

func (x *LagEvent) GetLagname() string {
	if x != nil && x.Lagname != nil {
		return *x.Lagname
	}
	return ""
}

func (x *LagEvent) GetInterfacesupcount() uint32 {
	if x != nil && x.Interfacesupcount != nil {
		return *x.Interfacesupcount
	}
	return 0
}

func (x *LagEvent) GetInterfacesup() []string {
	if x != nil {
		return x.Interfacesup
	}
	return nil
}

type MlagEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainId    *string          `protobuf:"bytes,1,req,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	DomainState *MlagDomainState `protobuf:"varint,2,req,name=domain_state,json=domainState,enum=aos.streaming.MlagDomainState" json:"domain_state,omitempty"`
	Intfname    *string          `protobuf:"bytes,3,req,name=intfname" json:"intfname,omitempty"`
	IntfState   *MlagIntfState   `protobuf:"varint,4,req,name=intf_state,json=intfState,enum=aos.streaming.MlagIntfState" json:"intf_state,omitempty"`
}

func (x *MlagEvent) Reset() {
	*x = MlagEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MlagEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MlagEvent) ProtoMessage() {}

func (x *MlagEvent) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MlagEvent.ProtoReflect.Descriptor instead.
func (*MlagEvent) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{9}
}

func (x *MlagEvent) GetDomainId() string {
	if x != nil && x.DomainId != nil {
		return *x.DomainId
	}
	return ""
}

func (x *MlagEvent) GetDomainState() MlagDomainState {
	if x != nil && x.DomainState != nil {
		return *x.DomainState
	}
	return MlagDomainState_MLAG_UNKNOWN
}

func (x *MlagEvent) GetIntfname() string {
	if x != nil && x.Intfname != nil {
		return *x.Intfname
	}
	return ""
}

func (x *MlagEvent) GetIntfState() MlagIntfState {
	if x != nil && x.IntfState != nil {
		return *x.IntfState
	}
	return MlagIntfState_MLAG_INTF_UNKNOWN
}

type ExtensibleServiceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value *string `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
}

func (x *ExtensibleServiceEvent) Reset() {
	*x = ExtensibleServiceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtensibleServiceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtensibleServiceEvent) ProtoMessage() {}

func (x *ExtensibleServiceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtensibleServiceEvent.ProtoReflect.Descriptor instead.
func (*ExtensibleServiceEvent) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{10}
}

func (x *ExtensibleServiceEvent) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *ExtensibleServiceEvent) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type RouteEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestNetwork *string           `protobuf:"bytes,1,req,name=dest_network,json=destNetwork" json:"dest_network,omitempty"`
	Status      *RouteEntryStatus `protobuf:"varint,2,req,name=status,enum=aos.streaming.RouteEntryStatus" json:"status,omitempty"`
	Hostname    *string           `protobuf:"bytes,3,req,name=hostname" json:"hostname,omitempty"`
}

func (x *RouteEvent) Reset() {
	*x = RouteEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteEvent) ProtoMessage() {}

func (x *RouteEvent) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteEvent.ProtoReflect.Descriptor instead.
func (*RouteEvent) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{11}
}

func (x *RouteEvent) GetDestNetwork() string {
	if x != nil && x.DestNetwork != nil {
		return *x.DestNetwork
	}
	return ""
}

func (x *RouteEvent) GetStatus() RouteEntryStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return RouteEntryStatus_ROUTE_ENTRY_STATUS_UNKNOWN
}

func (x *RouteEvent) GetHostname() string {
	if x != nil && x.Hostname != nil {
		return *x.Hostname
	}
	return ""
}

type EvpnType3RouteEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State    *RouteState `protobuf:"varint,1,req,name=state,enum=aos.streaming.RouteState" json:"state,omitempty"`
	SystemId *string     `protobuf:"bytes,2,req,name=system_id,json=systemId" json:"system_id,omitempty"`
	Vni      *uint32     `protobuf:"varint,3,req,name=vni" json:"vni,omitempty"`
	NextHop  *string     `protobuf:"bytes,4,req,name=next_hop,json=nextHop" json:"next_hop,omitempty"`
	Rd       *string     `protobuf:"bytes,5,req,name=rd" json:"rd,omitempty"`
	Rt       *string     `protobuf:"bytes,6,req,name=rt" json:"rt,omitempty"`
}

func (x *EvpnType3RouteEvent) Reset() {
	*x = EvpnType3RouteEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvpnType3RouteEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvpnType3RouteEvent) ProtoMessage() {}

func (x *EvpnType3RouteEvent) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvpnType3RouteEvent.ProtoReflect.Descriptor instead.
func (*EvpnType3RouteEvent) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{12}
}

func (x *EvpnType3RouteEvent) GetState() RouteState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return RouteState_ROUTE_ADD
}

func (x *EvpnType3RouteEvent) GetSystemId() string {
	if x != nil && x.SystemId != nil {
		return *x.SystemId
	}
	return ""
}

func (x *EvpnType3RouteEvent) GetVni() uint32 {
	if x != nil && x.Vni != nil {
		return *x.Vni
	}
	return 0
}

func (x *EvpnType3RouteEvent) GetNextHop() string {
	if x != nil && x.NextHop != nil {
		return *x.NextHop
	}
	return ""
}

func (x *EvpnType3RouteEvent) GetRd() string {
	if x != nil && x.Rd != nil {
		return *x.Rd
	}
	return ""
}

func (x *EvpnType3RouteEvent) GetRt() string {
	if x != nil && x.Rt != nil {
		return *x.Rt
	}
	return ""
}

type ActiveFloodlistEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State    *RouteState `protobuf:"varint,1,req,name=state,enum=aos.streaming.RouteState" json:"state,omitempty"`
	SystemId *string     `protobuf:"bytes,2,req,name=system_id,json=systemId" json:"system_id,omitempty"`
	Vni      *uint32     `protobuf:"varint,3,req,name=vni" json:"vni,omitempty"`
	Vtep     *string     `protobuf:"bytes,4,req,name=vtep" json:"vtep,omitempty"`
}

func (x *ActiveFloodlistEvent) Reset() {
	*x = ActiveFloodlistEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActiveFloodlistEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveFloodlistEvent) ProtoMessage() {}

func (x *ActiveFloodlistEvent) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveFloodlistEvent.ProtoReflect.Descriptor instead.
func (*ActiveFloodlistEvent) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{13}
}

func (x *ActiveFloodlistEvent) GetState() RouteState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return RouteState_ROUTE_ADD
}

func (x *ActiveFloodlistEvent) GetSystemId() string {
	if x != nil && x.SystemId != nil {
		return *x.SystemId
	}
	return ""
}

func (x *ActiveFloodlistEvent) GetVni() uint32 {
	if x != nil && x.Vni != nil {
		return *x.Vni
	}
	return 0
}

func (x *ActiveFloodlistEvent) GetVtep() string {
	if x != nil && x.Vtep != nil {
		return *x.Vtep
	}
	return ""
}

type EvpnType5RouteEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State    *RouteState `protobuf:"varint,1,req,name=state,enum=aos.streaming.RouteState" json:"state,omitempty"`
	SystemId *string     `protobuf:"bytes,2,req,name=system_id,json=systemId" json:"system_id,omitempty"`
	Af       *string     `protobuf:"bytes,3,req,name=af" json:"af,omitempty"`
	Subnet   *string     `protobuf:"bytes,4,req,name=subnet" json:"subnet,omitempty"`
	NextHop  *string     `protobuf:"bytes,5,req,name=next_hop,json=nextHop" json:"next_hop,omitempty"`
	Rd       *string     `protobuf:"bytes,6,req,name=rd" json:"rd,omitempty"`
	Rt       *string     `protobuf:"bytes,7,req,name=rt" json:"rt,omitempty"`
}

func (x *EvpnType5RouteEvent) Reset() {
	*x = EvpnType5RouteEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvpnType5RouteEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvpnType5RouteEvent) ProtoMessage() {}

func (x *EvpnType5RouteEvent) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvpnType5RouteEvent.ProtoReflect.Descriptor instead.
func (*EvpnType5RouteEvent) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{14}
}

func (x *EvpnType5RouteEvent) GetState() RouteState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return RouteState_ROUTE_ADD
}

func (x *EvpnType5RouteEvent) GetSystemId() string {
	if x != nil && x.SystemId != nil {
		return *x.SystemId
	}
	return ""
}

func (x *EvpnType5RouteEvent) GetAf() string {
	if x != nil && x.Af != nil {
		return *x.Af
	}
	return ""
}

func (x *EvpnType5RouteEvent) GetSubnet() string {
	if x != nil && x.Subnet != nil {
		return *x.Subnet
	}
	return ""
}

func (x *EvpnType5RouteEvent) GetNextHop() string {
	if x != nil && x.NextHop != nil {
		return *x.NextHop
	}
	return ""
}

func (x *EvpnType5RouteEvent) GetRd() string {
	if x != nil && x.Rd != nil {
		return *x.Rd
	}
	return ""
}

func (x *EvpnType5RouteEvent) GetRt() string {
	if x != nil && x.Rt != nil {
		return *x.Rt
	}
	return ""
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"` // uuid
	// Types that are assignable to Data:
	//	*Event_DeviceState
	//	*Event_Streaming
	//	*Event_CablePeer
	//	*Event_BgpNeighbor
	//	*Event_LinkStatus
	//	*Event_Traffic
	//	*Event_MacState
	//	*Event_ArpState
	//	*Event_LagState
	//	*Event_MlagState
	//	*Event_ExtensibleEvent
	//	*Event_RouteState
	Data isEvent_Data `protobuf_oneof:"data"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{15}
}

func (x *Event) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (m *Event) GetData() isEvent_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *Event) GetDeviceState() *DeviceStateEvent {
	if x, ok := x.GetData().(*Event_DeviceState); ok {
		return x.DeviceState
	}
	return nil
}

func (x *Event) GetStreaming() *StreamingEvent {
	if x, ok := x.GetData().(*Event_Streaming); ok {
		return x.Streaming
	}
	return nil
}

func (x *Event) GetCablePeer() *CablePeerEvent {
	if x, ok := x.GetData().(*Event_CablePeer); ok {
		return x.CablePeer
	}
	return nil
}

func (x *Event) GetBgpNeighbor() *BGPNeighborEvent {
	if x, ok := x.GetData().(*Event_BgpNeighbor); ok {
		return x.BgpNeighbor
	}
	return nil
}

func (x *Event) GetLinkStatus() *LinkStatusEvent {
	if x, ok := x.GetData().(*Event_LinkStatus); ok {
		return x.LinkStatus
	}
	return nil
}

func (x *Event) GetTraffic() *TrafficEvent {
	if x, ok := x.GetData().(*Event_Traffic); ok {
		return x.Traffic
	}
	return nil
}

func (x *Event) GetMacState() *MacEvent {
	if x, ok := x.GetData().(*Event_MacState); ok {
		return x.MacState
	}
	return nil
}

func (x *Event) GetArpState() *ArpEvent {
	if x, ok := x.GetData().(*Event_ArpState); ok {
		return x.ArpState
	}
	return nil
}

func (x *Event) GetLagState() *LagEvent {
	if x, ok := x.GetData().(*Event_LagState); ok {
		return x.LagState
	}
	return nil
}

func (x *Event) GetMlagState() *MlagEvent {
	if x, ok := x.GetData().(*Event_MlagState); ok {
		return x.MlagState
	}
	return nil
}

func (x *Event) GetExtensibleEvent() *ExtensibleServiceEvent {
	if x, ok := x.GetData().(*Event_ExtensibleEvent); ok {
		return x.ExtensibleEvent
	}
	return nil
}

func (x *Event) GetRouteState() *RouteEvent {
	if x, ok := x.GetData().(*Event_RouteState); ok {
		return x.RouteState
	}
	return nil
}

type isEvent_Data interface {
	isEvent_Data()
}

type Event_DeviceState struct {
	DeviceState *DeviceStateEvent `protobuf:"bytes,2,opt,name=device_state,json=deviceState,oneof"`
}

type Event_Streaming struct {
	Streaming *StreamingEvent `protobuf:"bytes,3,opt,name=streaming,oneof"`
}

type Event_CablePeer struct {
	CablePeer *CablePeerEvent `protobuf:"bytes,4,opt,name=cable_peer,json=cablePeer,oneof"`
}

type Event_BgpNeighbor struct {
	BgpNeighbor *BGPNeighborEvent `protobuf:"bytes,5,opt,name=bgp_neighbor,json=bgpNeighbor,oneof"`
}

type Event_LinkStatus struct {
	LinkStatus *LinkStatusEvent `protobuf:"bytes,6,opt,name=link_status,json=linkStatus,oneof"`
}

type Event_Traffic struct {
	Traffic *TrafficEvent `protobuf:"bytes,7,opt,name=traffic,oneof"`
}

type Event_MacState struct {
	MacState *MacEvent `protobuf:"bytes,8,opt,name=mac_state,json=macState,oneof"`
}

type Event_ArpState struct {
	ArpState *ArpEvent `protobuf:"bytes,9,opt,name=arp_state,json=arpState,oneof"`
}

type Event_LagState struct {
	LagState *LagEvent `protobuf:"bytes,10,opt,name=lag_state,json=lagState,oneof"`
}

type Event_MlagState struct {
	MlagState *MlagEvent `protobuf:"bytes,11,opt,name=mlag_state,json=mlagState,oneof"`
}

type Event_ExtensibleEvent struct {
	ExtensibleEvent *ExtensibleServiceEvent `protobuf:"bytes,12,opt,name=extensible_event,json=extensibleEvent,oneof"`
}

type Event_RouteState struct {
	RouteState *RouteEvent `protobuf:"bytes,13,opt,name=route_state,json=routeState,oneof"`
}

func (*Event_DeviceState) isEvent_Data() {}

func (*Event_Streaming) isEvent_Data() {}

func (*Event_CablePeer) isEvent_Data() {}

func (*Event_BgpNeighbor) isEvent_Data() {}

func (*Event_LinkStatus) isEvent_Data() {}

func (*Event_Traffic) isEvent_Data() {}

func (*Event_MacState) isEvent_Data() {}

func (*Event_ArpState) isEvent_Data() {}

func (*Event_LagState) isEvent_Data() {}

func (*Event_MlagState) isEvent_Data() {}

func (*Event_ExtensibleEvent) isEvent_Data() {}

func (*Event_RouteState) isEvent_Data() {}

type HostnameAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpectedHostname *string `protobuf:"bytes,1,req,name=expected_hostname,json=expectedHostname" json:"expected_hostname,omitempty"`
	ActualHostname   *string `protobuf:"bytes,2,req,name=actual_hostname,json=actualHostname" json:"actual_hostname,omitempty"`
}

func (x *HostnameAlert) Reset() {
	*x = HostnameAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostnameAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostnameAlert) ProtoMessage() {}

func (x *HostnameAlert) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostnameAlert.ProtoReflect.Descriptor instead.
func (*HostnameAlert) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{16}
}

func (x *HostnameAlert) GetExpectedHostname() string {
	if x != nil && x.ExpectedHostname != nil {
		return *x.ExpectedHostname
	}
	return ""
}

func (x *HostnameAlert) GetActualHostname() string {
	if x != nil && x.ActualHostname != nil {
		return *x.ActualHostname
	}
	return ""
}

type ConfigDeviationAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConfigDeviationAlert) Reset() {
	*x = ConfigDeviationAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigDeviationAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigDeviationAlert) ProtoMessage() {}

func (x *ConfigDeviationAlert) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigDeviationAlert.ProtoReflect.Descriptor instead.
func (*ConfigDeviationAlert) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{17}
}

type LivenessAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpectedAgents []string `protobuf:"bytes,1,rep,name=expected_agents,json=expectedAgents" json:"expected_agents,omitempty"`
	ActualAgents   []string `protobuf:"bytes,2,rep,name=actual_agents,json=actualAgents" json:"actual_agents,omitempty"`
	Alive          *bool    `protobuf:"varint,3,req,name=alive" json:"alive,omitempty"`
}

func (x *LivenessAlert) Reset() {
	*x = LivenessAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LivenessAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LivenessAlert) ProtoMessage() {}

func (x *LivenessAlert) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LivenessAlert.ProtoReflect.Descriptor instead.
func (*LivenessAlert) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{18}
}

func (x *LivenessAlert) GetExpectedAgents() []string {
	if x != nil {
		return x.ExpectedAgents
	}
	return nil
}

func (x *LivenessAlert) GetActualAgents() []string {
	if x != nil {
		return x.ActualAgents
	}
	return nil
}

func (x *LivenessAlert) GetAlive() bool {
	if x != nil && x.Alive != nil {
		return *x.Alive
	}
	return false
}

type ExtensibleAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key      *string `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Expected *string `protobuf:"bytes,2,req,name=expected" json:"expected,omitempty"`
	Actual   *string `protobuf:"bytes,3,req,name=actual" json:"actual,omitempty"`
}

func (x *ExtensibleAlert) Reset() {
	*x = ExtensibleAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtensibleAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtensibleAlert) ProtoMessage() {}

func (x *ExtensibleAlert) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtensibleAlert.ProtoReflect.Descriptor instead.
func (*ExtensibleAlert) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{19}
}

func (x *ExtensibleAlert) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *ExtensibleAlert) GetExpected() string {
	if x != nil && x.Expected != nil {
		return *x.Expected
	}
	return ""
}

func (x *ExtensibleAlert) GetActual() string {
	if x != nil && x.Actual != nil {
		return *x.Actual
	}
	return ""
}

type DeploymentAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpectedDeploymentStatus *DeploymentStatus `protobuf:"varint,1,req,name=expected_deployment_status,json=expectedDeploymentStatus,enum=aos.streaming.DeploymentStatus" json:"expected_deployment_status,omitempty"`
	ActualDeploymentStatus   *DeploymentStatus `protobuf:"varint,2,req,name=actual_deployment_status,json=actualDeploymentStatus,enum=aos.streaming.DeploymentStatus" json:"actual_deployment_status,omitempty"`
}

func (x *DeploymentAlert) Reset() {
	*x = DeploymentAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentAlert) ProtoMessage() {}

func (x *DeploymentAlert) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentAlert.ProtoReflect.Descriptor instead.
func (*DeploymentAlert) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{20}
}

func (x *DeploymentAlert) GetExpectedDeploymentStatus() DeploymentStatus {
	if x != nil && x.ExpectedDeploymentStatus != nil {
		return *x.ExpectedDeploymentStatus
	}
	return DeploymentStatus_DEPLOYMENT_STATUS_INPROGRESS
}

func (x *DeploymentAlert) GetActualDeploymentStatus() DeploymentStatus {
	if x != nil && x.ActualDeploymentStatus != nil {
		return *x.ActualDeploymentStatus
	}
	return DeploymentStatus_DEPLOYMENT_STATUS_INPROGRESS
}

type BlueprintRenderingAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailedSystems []string `protobuf:"bytes,1,rep,name=failed_systems,json=failedSystems" json:"failed_systems,omitempty"`
}

func (x *BlueprintRenderingAlert) Reset() {
	*x = BlueprintRenderingAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlueprintRenderingAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlueprintRenderingAlert) ProtoMessage() {}

func (x *BlueprintRenderingAlert) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlueprintRenderingAlert.ProtoReflect.Descriptor instead.
func (*BlueprintRenderingAlert) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{21}
}

func (x *BlueprintRenderingAlert) GetFailedSystems() []string {
	if x != nil {
		return x.FailedSystems
	}
	return nil
}

type RouteAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip                 *string           `protobuf:"bytes,1,req,name=ip" json:"ip,omitempty"`
	ExpectedDestStatus *RouteEntryStatus `protobuf:"varint,2,req,name=expected_dest_status,json=expectedDestStatus,enum=aos.streaming.RouteEntryStatus" json:"expected_dest_status,omitempty"`
	ActualDestStatus   *RouteEntryStatus `protobuf:"varint,3,req,name=actual_dest_status,json=actualDestStatus,enum=aos.streaming.RouteEntryStatus" json:"actual_dest_status,omitempty"`
}

func (x *RouteAlert) Reset() {
	*x = RouteAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteAlert) ProtoMessage() {}

func (x *RouteAlert) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteAlert.ProtoReflect.Descriptor instead.
func (*RouteAlert) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{22}
}

func (x *RouteAlert) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *RouteAlert) GetExpectedDestStatus() RouteEntryStatus {
	if x != nil && x.ExpectedDestStatus != nil {
		return *x.ExpectedDestStatus
	}
	return RouteEntryStatus_ROUTE_ENTRY_STATUS_UNKNOWN
}

func (x *RouteAlert) GetActualDestStatus() RouteEntryStatus {
	if x != nil && x.ActualDestStatus != nil {
		return *x.ActualDestStatus
	}
	return RouteEntryStatus_ROUTE_ENTRY_STATUS_UNKNOWN
}

type LagAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname             *string  `protobuf:"bytes,1,req,name=hostname" json:"hostname,omitempty"`
	Lagname              *string  `protobuf:"bytes,2,req,name=lagname" json:"lagname,omitempty"`
	ExpectedIfupCount    *uint32  `protobuf:"varint,5,req,name=expected_ifup_count,json=expectedIfupCount" json:"expected_ifup_count,omitempty"`
	ActualIfupCount      *uint32  `protobuf:"varint,6,req,name=actual_ifup_count,json=actualIfupCount" json:"actual_ifup_count,omitempty"`
	ExpectedInterfacesUp []string `protobuf:"bytes,7,rep,name=expected_interfaces_up,json=expectedInterfacesUp" json:"expected_interfaces_up,omitempty"`
	ActualInterfacesUp   []string `protobuf:"bytes,8,rep,name=actual_interfaces_up,json=actualInterfacesUp" json:"actual_interfaces_up,omitempty"`
}

func (x *LagAlert) Reset() {
	*x = LagAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LagAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LagAlert) ProtoMessage() {}

func (x *LagAlert) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LagAlert.ProtoReflect.Descriptor instead.
func (*LagAlert) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{23}
}

func (x *LagAlert) GetHostname() string {
	if x != nil && x.Hostname != nil {
		return *x.Hostname
	}
	return ""
}

func (x *LagAlert) GetLagname() string {
	if x != nil && x.Lagname != nil {
		return *x.Lagname
	}
	return ""
}

func (x *LagAlert) GetExpectedIfupCount() uint32 {
	if x != nil && x.ExpectedIfupCount != nil {
		return *x.ExpectedIfupCount
	}
	return 0
}

func (x *LagAlert) GetActualIfupCount() uint32 {
	if x != nil && x.ActualIfupCount != nil {
		return *x.ActualIfupCount
	}
	return 0
}

func (x *LagAlert) GetExpectedInterfacesUp() []string {
	if x != nil {
		return x.ExpectedInterfacesUp
	}
	return nil
}

func (x *LagAlert) GetActualInterfacesUp() []string {
	if x != nil {
		return x.ActualInterfacesUp
	}
	return nil
}

type StreamingAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AosServer      *string                  `protobuf:"bytes,1,req,name=aos_server,json=aosServer" json:"aos_server,omitempty"` // hostname of AOS-server
	StreamingType  *StreamingType           `protobuf:"varint,2,req,name=streaming_type,json=streamingType,enum=aos.streaming.StreamingType" json:"streaming_type,omitempty"`
	Protocol       *StreamingProtocol       `protobuf:"varint,3,req,name=protocol,enum=aos.streaming.StreamingProtocol" json:"protocol,omitempty"`
	Reason         *StreamingAlertReason    `protobuf:"varint,4,req,name=reason,enum=aos.streaming.StreamingAlertReason" json:"reason,omitempty"`
	SequencingMode *StreamingSequencingMode `protobuf:"varint,5,opt,name=sequencing_mode,json=sequencingMode,enum=aos.streaming.StreamingSequencingMode" json:"sequencing_mode,omitempty"`
}

func (x *StreamingAlert) Reset() {
	*x = StreamingAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingAlert) ProtoMessage() {}

func (x *StreamingAlert) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingAlert.ProtoReflect.Descriptor instead.
func (*StreamingAlert) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{24}
}

func (x *StreamingAlert) GetAosServer() string {
	if x != nil && x.AosServer != nil {
		return *x.AosServer
	}
	return ""
}

func (x *StreamingAlert) GetStreamingType() StreamingType {
	if x != nil && x.StreamingType != nil {
		return *x.StreamingType
	}
	return StreamingType_STREAMING_TYPE_PERFMON
}

func (x *StreamingAlert) GetProtocol() StreamingProtocol {
	if x != nil && x.Protocol != nil {
		return *x.Protocol
	}
	return StreamingProtocol_STREAMING_PROTOCOL_PROTOBUF_OVER_TCP
}

func (x *StreamingAlert) GetReason() StreamingAlertReason {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return StreamingAlertReason_STREAMING_ALERT_REASON_FAILED_CONNECTION
}

func (x *StreamingAlert) GetSequencingMode() StreamingSequencingMode {
	if x != nil && x.SequencingMode != nil {
		return *x.SequencingMode
	}
	return StreamingSequencingMode_STREAMING_UNSEQUENCED
}

type CablePeerMismatchAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LclHostname *string `protobuf:"bytes,1,req,name=lcl_hostname,json=lclHostname" json:"lcl_hostname,omitempty"`
	LclIfname   *string `protobuf:"bytes,2,req,name=lcl_ifname,json=lclIfname" json:"lcl_ifname,omitempty"`
	ExpHostname *string `protobuf:"bytes,4,req,name=exp_hostname,json=expHostname" json:"exp_hostname,omitempty"`
	ExpIfname   *string `protobuf:"bytes,5,req,name=exp_ifname,json=expIfname" json:"exp_ifname,omitempty"`
	RmtHostname *string `protobuf:"bytes,6,req,name=rmt_hostname,json=rmtHostname" json:"rmt_hostname,omitempty"`
	RmtIfname   *string `protobuf:"bytes,7,req,name=rmt_ifname,json=rmtIfname" json:"rmt_ifname,omitempty"`
	RmtSysdescr *string `protobuf:"bytes,8,req,name=rmt_sysdescr,json=rmtSysdescr" json:"rmt_sysdescr,omitempty"`
}

func (x *CablePeerMismatchAlert) Reset() {
	*x = CablePeerMismatchAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CablePeerMismatchAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CablePeerMismatchAlert) ProtoMessage() {}

func (x *CablePeerMismatchAlert) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CablePeerMismatchAlert.ProtoReflect.Descriptor instead.
func (*CablePeerMismatchAlert) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{25}
}

func (x *CablePeerMismatchAlert) GetLclHostname() string {
	if x != nil && x.LclHostname != nil {
		return *x.LclHostname
	}
	return ""
}

func (x *CablePeerMismatchAlert) GetLclIfname() string {
	if x != nil && x.LclIfname != nil {
		return *x.LclIfname
	}
	return ""
}

func (x *CablePeerMismatchAlert) GetExpHostname() string {
	if x != nil && x.ExpHostname != nil {
		return *x.ExpHostname
	}
	return ""
}

func (x *CablePeerMismatchAlert) GetExpIfname() string {
	if x != nil && x.ExpIfname != nil {
		return *x.ExpIfname
	}
	return ""
}

func (x *CablePeerMismatchAlert) GetRmtHostname() string {
	if x != nil && x.RmtHostname != nil {
		return *x.RmtHostname
	}
	return ""
}

func (x *CablePeerMismatchAlert) GetRmtIfname() string {
	if x != nil && x.RmtIfname != nil {
		return *x.RmtIfname
	}
	return ""
}

func (x *CablePeerMismatchAlert) GetRmtSysdescr() string {
	if x != nil && x.RmtSysdescr != nil {
		return *x.RmtSysdescr
	}
	return ""
}

type BGPNeighborMismatchAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LclHostname   *string                  `protobuf:"bytes,1,req,name=lcl_hostname,json=lclHostname" json:"lcl_hostname,omitempty"`
	LclIpaddr     *string                  `protobuf:"bytes,2,req,name=lcl_ipaddr,json=lclIpaddr" json:"lcl_ipaddr,omitempty"`
	LclAsn        *uint32                  `protobuf:"varint,3,req,name=lcl_asn,json=lclAsn" json:"lcl_asn,omitempty"`
	RmtIpaddr     *string                  `protobuf:"bytes,4,req,name=rmt_ipaddr,json=rmtIpaddr" json:"rmt_ipaddr,omitempty"`
	RmtAsn        *uint32                  `protobuf:"varint,5,req,name=rmt_asn,json=rmtAsn" json:"rmt_asn,omitempty"`
	ExpectedState *BgpSessionState         `protobuf:"varint,6,req,name=expected_state,json=expectedState,enum=aos.streaming.BgpSessionState" json:"expected_state,omitempty"`
	ActualState   *BgpSessionState         `protobuf:"varint,7,req,name=actual_state,json=actualState,enum=aos.streaming.BgpSessionState" json:"actual_state,omitempty"`
	RmtName       *string                  `protobuf:"bytes,8,req,name=rmt_name,json=rmtName" json:"rmt_name,omitempty"`
	VrfName       *string                  `protobuf:"bytes,9,req,name=vrf_name,json=vrfName" json:"vrf_name,omitempty"`
	AddrFamily    *BgpSessionAddressFamily `protobuf:"varint,10,req,name=addr_family,json=addrFamily,enum=aos.streaming.BgpSessionAddressFamily" json:"addr_family,omitempty"`
}

func (x *BGPNeighborMismatchAlert) Reset() {
	*x = BGPNeighborMismatchAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BGPNeighborMismatchAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BGPNeighborMismatchAlert) ProtoMessage() {}

func (x *BGPNeighborMismatchAlert) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BGPNeighborMismatchAlert.ProtoReflect.Descriptor instead.
func (*BGPNeighborMismatchAlert) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{26}
}

func (x *BGPNeighborMismatchAlert) GetLclHostname() string {
	if x != nil && x.LclHostname != nil {
		return *x.LclHostname
	}
	return ""
}

func (x *BGPNeighborMismatchAlert) GetLclIpaddr() string {
	if x != nil && x.LclIpaddr != nil {
		return *x.LclIpaddr
	}
	return ""
}

func (x *BGPNeighborMismatchAlert) GetLclAsn() uint32 {
	if x != nil && x.LclAsn != nil {
		return *x.LclAsn
	}
	return 0
}

func (x *BGPNeighborMismatchAlert) GetRmtIpaddr() string {
	if x != nil && x.RmtIpaddr != nil {
		return *x.RmtIpaddr
	}
	return ""
}

func (x *BGPNeighborMismatchAlert) GetRmtAsn() uint32 {
	if x != nil && x.RmtAsn != nil {
		return *x.RmtAsn
	}
	return 0
}

func (x *BGPNeighborMismatchAlert) GetExpectedState() BgpSessionState {
	if x != nil && x.ExpectedState != nil {
		return *x.ExpectedState
	}
	return BgpSessionState_BGP_SESSION_UP
}

func (x *BGPNeighborMismatchAlert) GetActualState() BgpSessionState {
	if x != nil && x.ActualState != nil {
		return *x.ActualState
	}
	return BgpSessionState_BGP_SESSION_UP
}

func (x *BGPNeighborMismatchAlert) GetRmtName() string {
	if x != nil && x.RmtName != nil {
		return *x.RmtName
	}
	return ""
}

func (x *BGPNeighborMismatchAlert) GetVrfName() string {
	if x != nil && x.VrfName != nil {
		return *x.VrfName
	}
	return ""
}

func (x *BGPNeighborMismatchAlert) GetAddrFamily() BgpSessionAddressFamily {
	if x != nil && x.AddrFamily != nil {
		return *x.AddrFamily
	}
	return BgpSessionAddressFamily_IPV4
}

type InterfaceLinkStatusMismatchAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname         *string     `protobuf:"bytes,1,req,name=hostname" json:"hostname,omitempty"`
	Ifname           *string     `protobuf:"bytes,2,req,name=ifname" json:"ifname,omitempty"`
	ExpectedIfstatus *LinkStatus `protobuf:"varint,3,req,name=expected_ifstatus,json=expectedIfstatus,enum=aos.streaming.LinkStatus" json:"expected_ifstatus,omitempty"`
	ActualIfstatus   *LinkStatus `protobuf:"varint,4,req,name=actual_ifstatus,json=actualIfstatus,enum=aos.streaming.LinkStatus" json:"actual_ifstatus,omitempty"`
}

func (x *InterfaceLinkStatusMismatchAlert) Reset() {
	*x = InterfaceLinkStatusMismatchAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceLinkStatusMismatchAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceLinkStatusMismatchAlert) ProtoMessage() {}

func (x *InterfaceLinkStatusMismatchAlert) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceLinkStatusMismatchAlert.ProtoReflect.Descriptor instead.
func (*InterfaceLinkStatusMismatchAlert) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{27}
}

func (x *InterfaceLinkStatusMismatchAlert) GetHostname() string {
	if x != nil && x.Hostname != nil {
		return *x.Hostname
	}
	return ""
}

func (x *InterfaceLinkStatusMismatchAlert) GetIfname() string {
	if x != nil && x.Ifname != nil {
		return *x.Ifname
	}
	return ""
}

func (x *InterfaceLinkStatusMismatchAlert) GetExpectedIfstatus() LinkStatus {
	if x != nil && x.ExpectedIfstatus != nil {
		return *x.ExpectedIfstatus
	}
	return LinkStatus_LINK_UP
}

func (x *InterfaceLinkStatusMismatchAlert) GetActualIfstatus() LinkStatus {
	if x != nil && x.ActualIfstatus != nil {
		return *x.ActualIfstatus
	}
	return LinkStatus_LINK_UP
}

type CountersAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Id:
	//	*CountersAlert_NodeRole
	//	*CountersAlert_PortRole
	//	*CountersAlert_Port
	//	*CountersAlert_Node
	//	*CountersAlert_Pod
	Id              isCountersAlert_Id `protobuf_oneof:"id"`
	MeasurementName *string            `protobuf:"bytes,6,req,name=measurement_name,json=measurementName" json:"measurement_name,omitempty"`
	IntervalSeconds *uint32            `protobuf:"varint,7,req,name=interval_seconds,json=intervalSeconds" json:"interval_seconds,omitempty"`
	AggregationType *AggregationType   `protobuf:"varint,8,req,name=aggregation_type,json=aggregationType,enum=aos.streaming.AggregationType" json:"aggregation_type,omitempty"`
}

func (x *CountersAlert) Reset() {
	*x = CountersAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountersAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountersAlert) ProtoMessage() {}

func (x *CountersAlert) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountersAlert.ProtoReflect.Descriptor instead.
func (*CountersAlert) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{28}
}

func (m *CountersAlert) GetId() isCountersAlert_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (x *CountersAlert) GetNodeRole() Feature {
	if x, ok := x.GetId().(*CountersAlert_NodeRole); ok {
		return x.NodeRole
	}
	return Feature_FEATURE_UNKNOWN
}

func (x *CountersAlert) GetPortRole() Feature {
	if x, ok := x.GetId().(*CountersAlert_PortRole); ok {
		return x.PortRole
	}
	return Feature_FEATURE_UNKNOWN
}

func (x *CountersAlert) GetPort() string {
	if x, ok := x.GetId().(*CountersAlert_Port); ok {
		return x.Port
	}
	return ""
}

func (x *CountersAlert) GetNode() string {
	if x, ok := x.GetId().(*CountersAlert_Node); ok {
		return x.Node
	}
	return ""
}

func (x *CountersAlert) GetPod() bool {
	if x, ok := x.GetId().(*CountersAlert_Pod); ok {
		return x.Pod
	}
	return false
}

func (x *CountersAlert) GetMeasurementName() string {
	if x != nil && x.MeasurementName != nil {
		return *x.MeasurementName
	}
	return ""
}

func (x *CountersAlert) GetIntervalSeconds() uint32 {
	if x != nil && x.IntervalSeconds != nil {
		return *x.IntervalSeconds
	}
	return 0
}

func (x *CountersAlert) GetAggregationType() AggregationType {
	if x != nil && x.AggregationType != nil {
		return *x.AggregationType
	}
	return AggregationType_AGGREGATION_TYPE_MAX
}

type isCountersAlert_Id interface {
	isCountersAlert_Id()
}

type CountersAlert_NodeRole struct {
	NodeRole Feature `protobuf:"varint,1,opt,name=node_role,json=nodeRole,enum=aos.streaming.Feature,oneof"`
}

type CountersAlert_PortRole struct {
	PortRole Feature `protobuf:"varint,2,opt,name=port_role,json=portRole,enum=aos.streaming.Feature,oneof"`
}

type CountersAlert_Port struct {
	Port string `protobuf:"bytes,3,opt,name=port,oneof"`
}

type CountersAlert_Node struct {
	Node string `protobuf:"bytes,4,opt,name=node,oneof"`
}

type CountersAlert_Pod struct {
	Pod bool `protobuf:"varint,5,opt,name=pod,oneof"`
}

func (*CountersAlert_NodeRole) isCountersAlert_Id() {}

func (*CountersAlert_PortRole) isCountersAlert_Id() {}

func (*CountersAlert_Port) isCountersAlert_Id() {}

func (*CountersAlert_Node) isCountersAlert_Id() {}

func (*CountersAlert_Pod) isCountersAlert_Id() {}

type KeyValuePair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value *string `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
}

func (x *KeyValuePair) Reset() {
	*x = KeyValuePair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValuePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValuePair) ProtoMessage() {}

func (x *KeyValuePair) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValuePair.ProtoReflect.Descriptor instead.
func (*KeyValuePair) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{29}
}

func (x *KeyValuePair) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *KeyValuePair) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type ProbeAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpectedInt           *int64          `protobuf:"varint,2,opt,name=expected_int,json=expectedInt" json:"expected_int,omitempty"`
	ActualInt             *int64          `protobuf:"varint,3,opt,name=actual_int,json=actualInt" json:"actual_int,omitempty"`
	ExpectedFloat         *float64        `protobuf:"fixed64,4,opt,name=expected_float,json=expectedFloat" json:"expected_float,omitempty"`
	ActualFloat           *float64        `protobuf:"fixed64,5,opt,name=actual_float,json=actualFloat" json:"actual_float,omitempty"`
	ExpectedDiscreteState *string         `protobuf:"bytes,6,opt,name=expected_discrete_state,json=expectedDiscreteState" json:"expected_discrete_state,omitempty"`
	ActualDiscreteState   *string         `protobuf:"bytes,7,opt,name=actual_discrete_state,json=actualDiscreteState" json:"actual_discrete_state,omitempty"`
	ProbeId               *string         `protobuf:"bytes,8,req,name=probe_id,json=probeId" json:"probe_id,omitempty"`
	StageName             *string         `protobuf:"bytes,9,req,name=stage_name,json=stageName" json:"stage_name,omitempty"`
	KeyValuePairs         []*KeyValuePair `protobuf:"bytes,10,rep,name=key_value_pairs,json=keyValuePairs" json:"key_value_pairs,omitempty"`
	ItemId                *string         `protobuf:"bytes,11,req,name=item_id,json=itemId" json:"item_id,omitempty"`
	ExpectedText          *string         `protobuf:"bytes,12,opt,name=expected_text,json=expectedText" json:"expected_text,omitempty"`
	ActualText            *string         `protobuf:"bytes,13,opt,name=actual_text,json=actualText" json:"actual_text,omitempty"`
	ProbeLabel            *string         `protobuf:"bytes,14,opt,name=probe_label,json=probeLabel" json:"probe_label,omitempty"`
	ExpectedIntMax        *int64          `protobuf:"varint,15,opt,name=expected_int_max,json=expectedIntMax" json:"expected_int_max,omitempty"`
	ExpectedFloatMax      *float64        `protobuf:"fixed64,16,opt,name=expected_float_max,json=expectedFloatMax" json:"expected_float_max,omitempty"`
}

func (x *ProbeAlert) Reset() {
	*x = ProbeAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProbeAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProbeAlert) ProtoMessage() {}

func (x *ProbeAlert) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProbeAlert.ProtoReflect.Descriptor instead.
func (*ProbeAlert) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{30}
}

func (x *ProbeAlert) GetExpectedInt() int64 {
	if x != nil && x.ExpectedInt != nil {
		return *x.ExpectedInt
	}
	return 0
}

func (x *ProbeAlert) GetActualInt() int64 {
	if x != nil && x.ActualInt != nil {
		return *x.ActualInt
	}
	return 0
}

func (x *ProbeAlert) GetExpectedFloat() float64 {
	if x != nil && x.ExpectedFloat != nil {
		return *x.ExpectedFloat
	}
	return 0
}

func (x *ProbeAlert) GetActualFloat() float64 {
	if x != nil && x.ActualFloat != nil {
		return *x.ActualFloat
	}
	return 0
}

func (x *ProbeAlert) GetExpectedDiscreteState() string {
	if x != nil && x.ExpectedDiscreteState != nil {
		return *x.ExpectedDiscreteState
	}
	return ""
}

func (x *ProbeAlert) GetActualDiscreteState() string {
	if x != nil && x.ActualDiscreteState != nil {
		return *x.ActualDiscreteState
	}
	return ""
}

func (x *ProbeAlert) GetProbeId() string {
	if x != nil && x.ProbeId != nil {
		return *x.ProbeId
	}
	return ""
}

func (x *ProbeAlert) GetStageName() string {
	if x != nil && x.StageName != nil {
		return *x.StageName
	}
	return ""
}

func (x *ProbeAlert) GetKeyValuePairs() []*KeyValuePair {
	if x != nil {
		return x.KeyValuePairs
	}
	return nil
}

func (x *ProbeAlert) GetItemId() string {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return ""
}

func (x *ProbeAlert) GetExpectedText() string {
	if x != nil && x.ExpectedText != nil {
		return *x.ExpectedText
	}
	return ""
}

func (x *ProbeAlert) GetActualText() string {
	if x != nil && x.ActualText != nil {
		return *x.ActualText
	}
	return ""
}

func (x *ProbeAlert) GetProbeLabel() string {
	if x != nil && x.ProbeLabel != nil {
		return *x.ProbeLabel
	}
	return ""
}

func (x *ProbeAlert) GetExpectedIntMax() int64 {
	if x != nil && x.ExpectedIntMax != nil {
		return *x.ExpectedIntMax
	}
	return 0
}

func (x *ProbeAlert) GetExpectedFloatMax() float64 {
	if x != nil && x.ExpectedFloatMax != nil {
		return *x.ExpectedFloatMax
	}
	return 0
}

type ConfigMismatchAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlueprintId *string `protobuf:"bytes,1,req,name=blueprint_id,json=blueprintId" json:"blueprint_id,omitempty"`
	CollectorId *string `protobuf:"bytes,2,req,name=collector_id,json=collectorId" json:"collector_id,omitempty"`
}

func (x *ConfigMismatchAlert) Reset() {
	*x = ConfigMismatchAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigMismatchAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigMismatchAlert) ProtoMessage() {}

func (x *ConfigMismatchAlert) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigMismatchAlert.ProtoReflect.Descriptor instead.
func (*ConfigMismatchAlert) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{31}
}

func (x *ConfigMismatchAlert) GetBlueprintId() string {
	if x != nil && x.BlueprintId != nil {
		return *x.BlueprintId
	}
	return ""
}

func (x *ConfigMismatchAlert) GetCollectorId() string {
	if x != nil && x.CollectorId != nil {
		return *x.CollectorId
	}
	return ""
}

type HeadroomAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeA           *string       `protobuf:"bytes,1,req,name=node_a,json=nodeA" json:"node_a,omitempty"`
	NodeB           *string       `protobuf:"bytes,2,req,name=node_b,json=nodeB" json:"node_b,omitempty"`
	IntervalSeconds *uint32       `protobuf:"varint,3,req,name=interval_seconds,json=intervalSeconds" json:"interval_seconds,omitempty"`
	HeadroomType    *HeadroomType `protobuf:"varint,4,req,name=headroom_type,json=headroomType,enum=aos.streaming.HeadroomType" json:"headroom_type,omitempty"`
}

func (x *HeadroomAlert) Reset() {
	*x = HeadroomAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeadroomAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeadroomAlert) ProtoMessage() {}

func (x *HeadroomAlert) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeadroomAlert.ProtoReflect.Descriptor instead.
func (*HeadroomAlert) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{32}
}

func (x *HeadroomAlert) GetNodeA() string {
	if x != nil && x.NodeA != nil {
		return *x.NodeA
	}
	return ""
}

func (x *HeadroomAlert) GetNodeB() string {
	if x != nil && x.NodeB != nil {
		return *x.NodeB
	}
	return ""
}

func (x *HeadroomAlert) GetIntervalSeconds() uint32 {
	if x != nil && x.IntervalSeconds != nil {
		return *x.IntervalSeconds
	}
	return 0
}

func (x *HeadroomAlert) GetHeadroomType() HeadroomType {
	if x != nil && x.HeadroomType != nil {
		return *x.HeadroomType
	}
	return HeadroomType_HEADROOM_TYPE_MAX
}

type MacAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Macaddress          *string  `protobuf:"bytes,1,req,name=macaddress" json:"macaddress,omitempty"`
	Intfname            *string  `protobuf:"bytes,2,req,name=intfname" json:"intfname,omitempty"`
	Vlan                *uint32  `protobuf:"varint,3,req,name=vlan" json:"vlan,omitempty"`
	Movecount           *uint32  `protobuf:"varint,4,req,name=movecount" json:"movecount,omitempty"`
	ActualMoveInterval  *float64 `protobuf:"fixed64,5,req,name=actual_move_interval,json=actualMoveInterval" json:"actual_move_interval,omitempty"`
	ExpectedMaxInterval *float64 `protobuf:"fixed64,6,req,name=expected_max_interval,json=expectedMaxInterval" json:"expected_max_interval,omitempty"`
}

func (x *MacAlert) Reset() {
	*x = MacAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacAlert) ProtoMessage() {}

func (x *MacAlert) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacAlert.ProtoReflect.Descriptor instead.
func (*MacAlert) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{33}
}

func (x *MacAlert) GetMacaddress() string {
	if x != nil && x.Macaddress != nil {
		return *x.Macaddress
	}
	return ""
}

func (x *MacAlert) GetIntfname() string {
	if x != nil && x.Intfname != nil {
		return *x.Intfname
	}
	return ""
}

func (x *MacAlert) GetVlan() uint32 {
	if x != nil && x.Vlan != nil {
		return *x.Vlan
	}
	return 0
}

func (x *MacAlert) GetMovecount() uint32 {
	if x != nil && x.Movecount != nil {
		return *x.Movecount
	}
	return 0
}

func (x *MacAlert) GetActualMoveInterval() float64 {
	if x != nil && x.ActualMoveInterval != nil {
		return *x.ActualMoveInterval
	}
	return 0
}

func (x *MacAlert) GetExpectedMaxInterval() float64 {
	if x != nil && x.ExpectedMaxInterval != nil {
		return *x.ExpectedMaxInterval
	}
	return 0
}

type ArpAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipaddress *string `protobuf:"bytes,1,req,name=ipaddress" json:"ipaddress,omitempty"`
	Mac       *string `protobuf:"bytes,2,req,name=mac" json:"mac,omitempty"`
	Intfname  *string `protobuf:"bytes,3,req,name=intfname" json:"intfname,omitempty"`
}

func (x *ArpAlert) Reset() {
	*x = ArpAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArpAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArpAlert) ProtoMessage() {}

func (x *ArpAlert) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArpAlert.ProtoReflect.Descriptor instead.
func (*ArpAlert) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{34}
}

func (x *ArpAlert) GetIpaddress() string {
	if x != nil && x.Ipaddress != nil {
		return *x.Ipaddress
	}
	return ""
}

func (x *ArpAlert) GetMac() string {
	if x != nil && x.Mac != nil {
		return *x.Mac
	}
	return ""
}

func (x *ArpAlert) GetIntfname() string {
	if x != nil && x.Intfname != nil {
		return *x.Intfname
	}
	return ""
}

type MlagAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname               *string          `protobuf:"bytes,1,req,name=hostname" json:"hostname,omitempty"`
	DomainId               *string          `protobuf:"bytes,2,req,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	MlagId                 *uint32          `protobuf:"varint,3,req,name=mlag_id,json=mlagId" json:"mlag_id,omitempty"`
	ExpectedDomainState    *MlagDomainState `protobuf:"varint,4,req,name=expected_domain_state,json=expectedDomainState,enum=aos.streaming.MlagDomainState" json:"expected_domain_state,omitempty"`
	ActualDomainState      *MlagDomainState `protobuf:"varint,5,req,name=actual_domain_state,json=actualDomainState,enum=aos.streaming.MlagDomainState" json:"actual_domain_state,omitempty"`
	Ifname                 *string          `protobuf:"bytes,6,req,name=ifname" json:"ifname,omitempty"`
	ExpectedIntfState      *MlagIntfState   `protobuf:"varint,7,req,name=expected_intf_state,json=expectedIntfState,enum=aos.streaming.MlagIntfState" json:"expected_intf_state,omitempty"`
	ActualIntfState        *MlagIntfState   `protobuf:"varint,8,req,name=actual_intf_state,json=actualIntfState,enum=aos.streaming.MlagIntfState" json:"actual_intf_state,omitempty"`
	PeerLink               *string          `protobuf:"bytes,9,req,name=peer_link,json=peerLink" json:"peer_link,omitempty"`
	PeerLinkStatus         *string          `protobuf:"bytes,10,req,name=peer_link_status,json=peerLinkStatus" json:"peer_link_status,omitempty"`
	ExpectedPeerLinkStatus *string          `protobuf:"bytes,11,req,name=expected_peer_link_status,json=expectedPeerLinkStatus" json:"expected_peer_link_status,omitempty"`
}

func (x *MlagAlert) Reset() {
	*x = MlagAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MlagAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MlagAlert) ProtoMessage() {}

func (x *MlagAlert) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MlagAlert.ProtoReflect.Descriptor instead.
func (*MlagAlert) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{35}
}

func (x *MlagAlert) GetHostname() string {
	if x != nil && x.Hostname != nil {
		return *x.Hostname
	}
	return ""
}

func (x *MlagAlert) GetDomainId() string {
	if x != nil && x.DomainId != nil {
		return *x.DomainId
	}
	return ""
}

func (x *MlagAlert) GetMlagId() uint32 {
	if x != nil && x.MlagId != nil {
		return *x.MlagId
	}
	return 0
}

func (x *MlagAlert) GetExpectedDomainState() MlagDomainState {
	if x != nil && x.ExpectedDomainState != nil {
		return *x.ExpectedDomainState
	}
	return MlagDomainState_MLAG_UNKNOWN
}

func (x *MlagAlert) GetActualDomainState() MlagDomainState {
	if x != nil && x.ActualDomainState != nil {
		return *x.ActualDomainState
	}
	return MlagDomainState_MLAG_UNKNOWN
}

func (x *MlagAlert) GetIfname() string {
	if x != nil && x.Ifname != nil {
		return *x.Ifname
	}
	return ""
}

func (x *MlagAlert) GetExpectedIntfState() MlagIntfState {
	if x != nil && x.ExpectedIntfState != nil {
		return *x.ExpectedIntfState
	}
	return MlagIntfState_MLAG_INTF_UNKNOWN
}

func (x *MlagAlert) GetActualIntfState() MlagIntfState {
	if x != nil && x.ActualIntfState != nil {
		return *x.ActualIntfState
	}
	return MlagIntfState_MLAG_INTF_UNKNOWN
}

func (x *MlagAlert) GetPeerLink() string {
	if x != nil && x.PeerLink != nil {
		return *x.PeerLink
	}
	return ""
}

func (x *MlagAlert) GetPeerLinkStatus() string {
	if x != nil && x.PeerLinkStatus != nil {
		return *x.PeerLinkStatus
	}
	return ""
}

func (x *MlagAlert) GetExpectedPeerLinkStatus() string {
	if x != nil && x.ExpectedPeerLinkStatus != nil {
		return *x.ExpectedPeerLinkStatus
	}
	return ""
}

type TestAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestInt *uint64 `protobuf:"varint,1,req,name=test_int,json=testInt" json:"test_int,omitempty"`
}

func (x *TestAlert) Reset() {
	*x = TestAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestAlert) ProtoMessage() {}

func (x *TestAlert) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestAlert.ProtoReflect.Descriptor instead.
func (*TestAlert) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{36}
}

func (x *TestAlert) GetTestInt() uint64 {
	if x != nil && x.TestInt != nil {
		return *x.TestInt
	}
	return 0
}

type InterfaceCounters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxUnicastPackets   *uint64 `protobuf:"varint,1,req,name=tx_unicast_packets,json=txUnicastPackets" json:"tx_unicast_packets,omitempty"`
	TxBroadcastPackets *uint64 `protobuf:"varint,2,req,name=tx_broadcast_packets,json=txBroadcastPackets" json:"tx_broadcast_packets,omitempty"`
	TxMulticastPackets *uint64 `protobuf:"varint,3,req,name=tx_multicast_packets,json=txMulticastPackets" json:"tx_multicast_packets,omitempty"`
	TxBytes            *uint64 `protobuf:"varint,4,req,name=tx_bytes,json=txBytes" json:"tx_bytes,omitempty"`
	RxUnicastPackets   *uint64 `protobuf:"varint,5,req,name=rx_unicast_packets,json=rxUnicastPackets" json:"rx_unicast_packets,omitempty"`
	RxBroadcastPackets *uint64 `protobuf:"varint,6,req,name=rx_broadcast_packets,json=rxBroadcastPackets" json:"rx_broadcast_packets,omitempty"`
	RxMulticastPackets *uint64 `protobuf:"varint,7,req,name=rx_multicast_packets,json=rxMulticastPackets" json:"rx_multicast_packets,omitempty"`
	RxBytes            *uint64 `protobuf:"varint,8,req,name=rx_bytes,json=rxBytes" json:"rx_bytes,omitempty"`
	TxErrorPackets     *uint64 `protobuf:"varint,9,req,name=tx_error_packets,json=txErrorPackets" json:"tx_error_packets,omitempty"`
	TxDiscardPackets   *uint64 `protobuf:"varint,10,req,name=tx_discard_packets,json=txDiscardPackets" json:"tx_discard_packets,omitempty"`
	RxErrorPackets     *uint64 `protobuf:"varint,11,req,name=rx_error_packets,json=rxErrorPackets" json:"rx_error_packets,omitempty"`
	RxDiscardPackets   *uint64 `protobuf:"varint,12,req,name=rx_discard_packets,json=rxDiscardPackets" json:"rx_discard_packets,omitempty"`
	AlignmentErrors    *uint64 `protobuf:"varint,13,req,name=alignment_errors,json=alignmentErrors" json:"alignment_errors,omitempty"`
	FcsErrors          *uint64 `protobuf:"varint,14,req,name=fcs_errors,json=fcsErrors" json:"fcs_errors,omitempty"`
	SymbolErrors       *uint64 `protobuf:"varint,15,req,name=symbol_errors,json=symbolErrors" json:"symbol_errors,omitempty"`
	Runts              *uint64 `protobuf:"varint,16,req,name=runts" json:"runts,omitempty"`
	Giants             *uint64 `protobuf:"varint,17,req,name=giants" json:"giants,omitempty"`
	DeltaSeconds       *uint64 `protobuf:"varint,18,opt,name=delta_seconds,json=deltaSeconds,def=5" json:"delta_seconds,omitempty"`
}

// Default values for InterfaceCounters fields.
const (
	Default_InterfaceCounters_DeltaSeconds = uint64(5)
)

func (x *InterfaceCounters) Reset() {
	*x = InterfaceCounters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceCounters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceCounters) ProtoMessage() {}

func (x *InterfaceCounters) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceCounters.ProtoReflect.Descriptor instead.
func (*InterfaceCounters) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{37}
}

func (x *InterfaceCounters) GetTxUnicastPackets() uint64 {
	if x != nil && x.TxUnicastPackets != nil {
		return *x.TxUnicastPackets
	}
	return 0
}

func (x *InterfaceCounters) GetTxBroadcastPackets() uint64 {
	if x != nil && x.TxBroadcastPackets != nil {
		return *x.TxBroadcastPackets
	}
	return 0
}

func (x *InterfaceCounters) GetTxMulticastPackets() uint64 {
	if x != nil && x.TxMulticastPackets != nil {
		return *x.TxMulticastPackets
	}
	return 0
}

func (x *InterfaceCounters) GetTxBytes() uint64 {
	if x != nil && x.TxBytes != nil {
		return *x.TxBytes
	}
	return 0
}

func (x *InterfaceCounters) GetRxUnicastPackets() uint64 {
	if x != nil && x.RxUnicastPackets != nil {
		return *x.RxUnicastPackets
	}
	return 0
}

func (x *InterfaceCounters) GetRxBroadcastPackets() uint64 {
	if x != nil && x.RxBroadcastPackets != nil {
		return *x.RxBroadcastPackets
	}
	return 0
}

func (x *InterfaceCounters) GetRxMulticastPackets() uint64 {
	if x != nil && x.RxMulticastPackets != nil {
		return *x.RxMulticastPackets
	}
	return 0
}

func (x *InterfaceCounters) GetRxBytes() uint64 {
	if x != nil && x.RxBytes != nil {
		return *x.RxBytes
	}
	return 0
}

func (x *InterfaceCounters) GetTxErrorPackets() uint64 {
	if x != nil && x.TxErrorPackets != nil {
		return *x.TxErrorPackets
	}
	return 0
}

func (x *InterfaceCounters) GetTxDiscardPackets() uint64 {
	if x != nil && x.TxDiscardPackets != nil {
		return *x.TxDiscardPackets
	}
	return 0
}

func (x *InterfaceCounters) GetRxErrorPackets() uint64 {
	if x != nil && x.RxErrorPackets != nil {
		return *x.RxErrorPackets
	}
	return 0
}

func (x *InterfaceCounters) GetRxDiscardPackets() uint64 {
	if x != nil && x.RxDiscardPackets != nil {
		return *x.RxDiscardPackets
	}
	return 0
}

func (x *InterfaceCounters) GetAlignmentErrors() uint64 {
	if x != nil && x.AlignmentErrors != nil {
		return *x.AlignmentErrors
	}
	return 0
}

func (x *InterfaceCounters) GetFcsErrors() uint64 {
	if x != nil && x.FcsErrors != nil {
		return *x.FcsErrors
	}
	return 0
}

func (x *InterfaceCounters) GetSymbolErrors() uint64 {
	if x != nil && x.SymbolErrors != nil {
		return *x.SymbolErrors
	}
	return 0
}

func (x *InterfaceCounters) GetRunts() uint64 {
	if x != nil && x.Runts != nil {
		return *x.Runts
	}
	return 0
}

func (x *InterfaceCounters) GetGiants() uint64 {
	if x != nil && x.Giants != nil {
		return *x.Giants
	}
	return 0
}

func (x *InterfaceCounters) GetDeltaSeconds() uint64 {
	if x != nil && x.DeltaSeconds != nil {
		return *x.DeltaSeconds
	}
	return Default_InterfaceCounters_DeltaSeconds
}

type SystemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuUser     *float32 `protobuf:"fixed32,1,req,name=cpu_user,json=cpuUser" json:"cpu_user,omitempty"`
	CpuSystem   *float32 `protobuf:"fixed32,2,req,name=cpu_system,json=cpuSystem" json:"cpu_system,omitempty"`
	CpuIdle     *float32 `protobuf:"fixed32,3,req,name=cpu_idle,json=cpuIdle" json:"cpu_idle,omitempty"`
	MemoryUsed  *uint64  `protobuf:"varint,4,req,name=memory_used,json=memoryUsed" json:"memory_used,omitempty"`
	MemoryTotal *uint64  `protobuf:"varint,5,req,name=memory_total,json=memoryTotal" json:"memory_total,omitempty"`
}

func (x *SystemInfo) Reset() {
	*x = SystemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemInfo) ProtoMessage() {}

func (x *SystemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemInfo.ProtoReflect.Descriptor instead.
func (*SystemInfo) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{38}
}

func (x *SystemInfo) GetCpuUser() float32 {
	if x != nil && x.CpuUser != nil {
		return *x.CpuUser
	}
	return 0
}

func (x *SystemInfo) GetCpuSystem() float32 {
	if x != nil && x.CpuSystem != nil {
		return *x.CpuSystem
	}
	return 0
}

func (x *SystemInfo) GetCpuIdle() float32 {
	if x != nil && x.CpuIdle != nil {
		return *x.CpuIdle
	}
	return 0
}

func (x *SystemInfo) GetMemoryUsed() uint64 {
	if x != nil && x.MemoryUsed != nil {
		return *x.MemoryUsed
	}
	return 0
}

func (x *SystemInfo) GetMemoryTotal() uint64 {
	if x != nil && x.MemoryTotal != nil {
		return *x.MemoryTotal
	}
	return 0
}

type ProcessInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessName *string  `protobuf:"bytes,1,req,name=process_name,json=processName" json:"process_name,omitempty"`
	CpuUser     *float32 `protobuf:"fixed32,2,req,name=cpu_user,json=cpuUser" json:"cpu_user,omitempty"`
	CpuSystem   *float32 `protobuf:"fixed32,3,req,name=cpu_system,json=cpuSystem" json:"cpu_system,omitempty"`
	MemoryUsed  *uint64  `protobuf:"varint,4,req,name=memory_used,json=memoryUsed" json:"memory_used,omitempty"`
}

func (x *ProcessInfo) Reset() {
	*x = ProcessInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessInfo) ProtoMessage() {}

func (x *ProcessInfo) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessInfo.ProtoReflect.Descriptor instead.
func (*ProcessInfo) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{39}
}

func (x *ProcessInfo) GetProcessName() string {
	if x != nil && x.ProcessName != nil {
		return *x.ProcessName
	}
	return ""
}

func (x *ProcessInfo) GetCpuUser() float32 {
	if x != nil && x.CpuUser != nil {
		return *x.CpuUser
	}
	return 0
}

func (x *ProcessInfo) GetCpuSystem() float32 {
	if x != nil && x.CpuSystem != nil {
		return *x.CpuSystem
	}
	return 0
}

func (x *ProcessInfo) GetMemoryUsed() uint64 {
	if x != nil && x.MemoryUsed != nil {
		return *x.MemoryUsed
	}
	return 0
}

type FileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName *string `protobuf:"bytes,1,req,name=file_name,json=fileName" json:"file_name,omitempty"`
	FileSize *uint64 `protobuf:"varint,2,req,name=file_size,json=fileSize" json:"file_size,omitempty"`
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{40}
}

func (x *FileInfo) GetFileName() string {
	if x != nil && x.FileName != nil {
		return *x.FileName
	}
	return ""
}

func (x *FileInfo) GetFileSize() uint64 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

type SysResourceCounters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemInfo  *SystemInfo    `protobuf:"bytes,1,opt,name=system_info,json=systemInfo" json:"system_info,omitempty"`
	ProcessInfo []*ProcessInfo `protobuf:"bytes,2,rep,name=process_info,json=processInfo" json:"process_info,omitempty"`
	FileInfo    []*FileInfo    `protobuf:"bytes,3,rep,name=file_info,json=fileInfo" json:"file_info,omitempty"`
}

func (x *SysResourceCounters) Reset() {
	*x = SysResourceCounters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysResourceCounters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysResourceCounters) ProtoMessage() {}

func (x *SysResourceCounters) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysResourceCounters.ProtoReflect.Descriptor instead.
func (*SysResourceCounters) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{41}
}

func (x *SysResourceCounters) GetSystemInfo() *SystemInfo {
	if x != nil {
		return x.SystemInfo
	}
	return nil
}

func (x *SysResourceCounters) GetProcessInfo() []*ProcessInfo {
	if x != nil {
		return x.ProcessInfo
	}
	return nil
}

func (x *SysResourceCounters) GetFileInfo() []*FileInfo {
	if x != nil {
		return x.FileInfo
	}
	return nil
}

type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,5,req,name=name" json:"name,omitempty"`
	// Types that are assignable to Value:
	//	*Tag_Int64Value
	//	*Tag_FloatValue
	//	*Tag_StringValue
	Value isTag_Value `protobuf_oneof:"value"`
}

func (x *Tag) Reset() {
	*x = Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{42}
}

func (x *Tag) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (m *Tag) GetValue() isTag_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Tag) GetInt64Value() int64 {
	if x, ok := x.GetValue().(*Tag_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (x *Tag) GetFloatValue() float32 {
	if x, ok := x.GetValue().(*Tag_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (x *Tag) GetStringValue() string {
	if x, ok := x.GetValue().(*Tag_StringValue); ok {
		return x.StringValue
	}
	return ""
}

type isTag_Value interface {
	isTag_Value()
}

type Tag_Int64Value struct {
	Int64Value int64 `protobuf:"varint,1,opt,name=int64_value,json=int64Value,oneof"`
}

type Tag_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,2,opt,name=float_value,json=floatValue,oneof"`
}

type Tag_StringValue struct {
	StringValue string `protobuf:"bytes,3,opt,name=string_value,json=stringValue,oneof"`
}

func (*Tag_Int64Value) isTag_Value() {}

func (*Tag_FloatValue) isTag_Value() {}

func (*Tag_StringValue) isTag_Value() {}

type Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,5,req,name=name" json:"name,omitempty"`
	// Types that are assignable to Value:
	//	*Field_Int64Value
	//	*Field_FloatValue
	//	*Field_StringValue
	Value isField_Value `protobuf_oneof:"value"`
}

func (x *Field) Reset() {
	*x = Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Field) ProtoMessage() {}

func (x *Field) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Field.ProtoReflect.Descriptor instead.
func (*Field) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{43}
}

func (x *Field) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (m *Field) GetValue() isField_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Field) GetInt64Value() int64 {
	if x, ok := x.GetValue().(*Field_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (x *Field) GetFloatValue() float32 {
	if x, ok := x.GetValue().(*Field_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (x *Field) GetStringValue() string {
	if x, ok := x.GetValue().(*Field_StringValue); ok {
		return x.StringValue
	}
	return ""
}

type isField_Value interface {
	isField_Value()
}

type Field_Int64Value struct {
	Int64Value int64 `protobuf:"varint,1,opt,name=int64_value,json=int64Value,oneof"`
}

type Field_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,2,opt,name=float_value,json=floatValue,oneof"`
}

type Field_StringValue struct {
	StringValue string `protobuf:"bytes,3,opt,name=string_value,json=stringValue,oneof"`
}

func (*Field_Int64Value) isField_Value() {}

func (*Field_FloatValue) isField_Value() {}

func (*Field_StringValue) isField_Value() {}

type ProbeProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,5,req,name=name" json:"name,omitempty"`
	// Value contains json encoded data
	Value *string `protobuf:"bytes,6,req,name=value" json:"value,omitempty"`
}

func (x *ProbeProperty) Reset() {
	*x = ProbeProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProbeProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProbeProperty) ProtoMessage() {}

func (x *ProbeProperty) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProbeProperty.ProtoReflect.Descriptor instead.
func (*ProbeProperty) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{44}
}

func (x *ProbeProperty) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ProbeProperty) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type InterfaceCountersUtilization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxUtilization            *uint64 `protobuf:"varint,1,req,name=tx_utilization,json=txUtilization" json:"tx_utilization,omitempty"`
	RxUtilization            *uint64 `protobuf:"varint,2,req,name=rx_utilization,json=rxUtilization" json:"rx_utilization,omitempty"`
	TxUnicastPps             *uint64 `protobuf:"varint,3,req,name=tx_unicast_pps,json=txUnicastPps" json:"tx_unicast_pps,omitempty"`
	TxBroadcastPps           *uint64 `protobuf:"varint,4,req,name=tx_broadcast_pps,json=txBroadcastPps" json:"tx_broadcast_pps,omitempty"`
	TxMulticastPps           *uint64 `protobuf:"varint,5,req,name=tx_multicast_pps,json=txMulticastPps" json:"tx_multicast_pps,omitempty"`
	TxBps                    *uint64 `protobuf:"varint,6,req,name=tx_bps,json=txBps" json:"tx_bps,omitempty"`
	TxErrorPps               *uint64 `protobuf:"varint,7,req,name=tx_error_pps,json=txErrorPps" json:"tx_error_pps,omitempty"`
	TxDiscardPps             *uint64 `protobuf:"varint,8,req,name=tx_discard_pps,json=txDiscardPps" json:"tx_discard_pps,omitempty"`
	RxUnicastPps             *uint64 `protobuf:"varint,9,req,name=rx_unicast_pps,json=rxUnicastPps" json:"rx_unicast_pps,omitempty"`
	RxBroadcastPps           *uint64 `protobuf:"varint,10,req,name=rx_broadcast_pps,json=rxBroadcastPps" json:"rx_broadcast_pps,omitempty"`
	RxMulticastPps           *uint64 `protobuf:"varint,11,req,name=rx_multicast_pps,json=rxMulticastPps" json:"rx_multicast_pps,omitempty"`
	RxBps                    *uint64 `protobuf:"varint,12,req,name=rx_bps,json=rxBps" json:"rx_bps,omitempty"`
	RxErrorPps               *uint64 `protobuf:"varint,13,req,name=rx_error_pps,json=rxErrorPps" json:"rx_error_pps,omitempty"`
	RxDiscardPps             *uint64 `protobuf:"varint,14,req,name=rx_discard_pps,json=rxDiscardPps" json:"rx_discard_pps,omitempty"`
	AlignmentErrorsPerSecond *uint64 `protobuf:"varint,15,req,name=alignment_errors_per_second,json=alignmentErrorsPerSecond" json:"alignment_errors_per_second,omitempty"`
	FcsErrorsPerSecond       *uint64 `protobuf:"varint,16,req,name=fcs_errors_per_second,json=fcsErrorsPerSecond" json:"fcs_errors_per_second,omitempty"`
	SymbolErrorsPerSecond    *uint64 `protobuf:"varint,17,req,name=symbol_errors_per_second,json=symbolErrorsPerSecond" json:"symbol_errors_per_second,omitempty"`
	RuntsPerSecond           *uint64 `protobuf:"varint,18,req,name=runts_per_second,json=runtsPerSecond" json:"runts_per_second,omitempty"`
	GiantsPerSecond          *uint64 `protobuf:"varint,19,req,name=giants_per_second,json=giantsPerSecond" json:"giants_per_second,omitempty"`
}

func (x *InterfaceCountersUtilization) Reset() {
	*x = InterfaceCountersUtilization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceCountersUtilization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceCountersUtilization) ProtoMessage() {}

func (x *InterfaceCountersUtilization) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceCountersUtilization.ProtoReflect.Descriptor instead.
func (*InterfaceCountersUtilization) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{45}
}

func (x *InterfaceCountersUtilization) GetTxUtilization() uint64 {
	if x != nil && x.TxUtilization != nil {
		return *x.TxUtilization
	}
	return 0
}

func (x *InterfaceCountersUtilization) GetRxUtilization() uint64 {
	if x != nil && x.RxUtilization != nil {
		return *x.RxUtilization
	}
	return 0
}

func (x *InterfaceCountersUtilization) GetTxUnicastPps() uint64 {
	if x != nil && x.TxUnicastPps != nil {
		return *x.TxUnicastPps
	}
	return 0
}

func (x *InterfaceCountersUtilization) GetTxBroadcastPps() uint64 {
	if x != nil && x.TxBroadcastPps != nil {
		return *x.TxBroadcastPps
	}
	return 0
}

func (x *InterfaceCountersUtilization) GetTxMulticastPps() uint64 {
	if x != nil && x.TxMulticastPps != nil {
		return *x.TxMulticastPps
	}
	return 0
}

func (x *InterfaceCountersUtilization) GetTxBps() uint64 {
	if x != nil && x.TxBps != nil {
		return *x.TxBps
	}
	return 0
}

func (x *InterfaceCountersUtilization) GetTxErrorPps() uint64 {
	if x != nil && x.TxErrorPps != nil {
		return *x.TxErrorPps
	}
	return 0
}

func (x *InterfaceCountersUtilization) GetTxDiscardPps() uint64 {
	if x != nil && x.TxDiscardPps != nil {
		return *x.TxDiscardPps
	}
	return 0
}

func (x *InterfaceCountersUtilization) GetRxUnicastPps() uint64 {
	if x != nil && x.RxUnicastPps != nil {
		return *x.RxUnicastPps
	}
	return 0
}

func (x *InterfaceCountersUtilization) GetRxBroadcastPps() uint64 {
	if x != nil && x.RxBroadcastPps != nil {
		return *x.RxBroadcastPps
	}
	return 0
}

func (x *InterfaceCountersUtilization) GetRxMulticastPps() uint64 {
	if x != nil && x.RxMulticastPps != nil {
		return *x.RxMulticastPps
	}
	return 0
}

func (x *InterfaceCountersUtilization) GetRxBps() uint64 {
	if x != nil && x.RxBps != nil {
		return *x.RxBps
	}
	return 0
}

func (x *InterfaceCountersUtilization) GetRxErrorPps() uint64 {
	if x != nil && x.RxErrorPps != nil {
		return *x.RxErrorPps
	}
	return 0
}

func (x *InterfaceCountersUtilization) GetRxDiscardPps() uint64 {
	if x != nil && x.RxDiscardPps != nil {
		return *x.RxDiscardPps
	}
	return 0
}

func (x *InterfaceCountersUtilization) GetAlignmentErrorsPerSecond() uint64 {
	if x != nil && x.AlignmentErrorsPerSecond != nil {
		return *x.AlignmentErrorsPerSecond
	}
	return 0
}

func (x *InterfaceCountersUtilization) GetFcsErrorsPerSecond() uint64 {
	if x != nil && x.FcsErrorsPerSecond != nil {
		return *x.FcsErrorsPerSecond
	}
	return 0
}

func (x *InterfaceCountersUtilization) GetSymbolErrorsPerSecond() uint64 {
	if x != nil && x.SymbolErrorsPerSecond != nil {
		return *x.SymbolErrorsPerSecond
	}
	return 0
}

func (x *InterfaceCountersUtilization) GetRuntsPerSecond() uint64 {
	if x != nil && x.RuntsPerSecond != nil {
		return *x.RuntsPerSecond
	}
	return 0
}

func (x *InterfaceCountersUtilization) GetGiantsPerSecond() uint64 {
	if x != nil && x.GiantsPerSecond != nil {
		return *x.GiantsPerSecond
	}
	return 0
}

type SystemInterfaceUtilization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggregateTxBps         *uint32 `protobuf:"varint,1,req,name=aggregate_tx_bps,json=aggregateTxBps" json:"aggregate_tx_bps,omitempty"`
	AggregateRxBps         *uint32 `protobuf:"varint,2,req,name=aggregate_rx_bps,json=aggregateRxBps" json:"aggregate_rx_bps,omitempty"`
	MaxIfcTxUtilization    *uint32 `protobuf:"varint,3,req,name=max_ifc_tx_utilization,json=maxIfcTxUtilization" json:"max_ifc_tx_utilization,omitempty"`
	MaxIfcRxUtilization    *uint32 `protobuf:"varint,4,req,name=max_ifc_rx_utilization,json=maxIfcRxUtilization" json:"max_ifc_rx_utilization,omitempty"`
	AggregateTxUtilization *uint32 `protobuf:"varint,5,req,name=aggregate_tx_utilization,json=aggregateTxUtilization" json:"aggregate_tx_utilization,omitempty"`
	AggregateRxUtilization *uint32 `protobuf:"varint,6,req,name=aggregate_rx_utilization,json=aggregateRxUtilization" json:"aggregate_rx_utilization,omitempty"`
}

func (x *SystemInterfaceUtilization) Reset() {
	*x = SystemInterfaceUtilization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemInterfaceUtilization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemInterfaceUtilization) ProtoMessage() {}

func (x *SystemInterfaceUtilization) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemInterfaceUtilization.ProtoReflect.Descriptor instead.
func (*SystemInterfaceUtilization) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{46}
}

func (x *SystemInterfaceUtilization) GetAggregateTxBps() uint32 {
	if x != nil && x.AggregateTxBps != nil {
		return *x.AggregateTxBps
	}
	return 0
}

func (x *SystemInterfaceUtilization) GetAggregateRxBps() uint32 {
	if x != nil && x.AggregateRxBps != nil {
		return *x.AggregateRxBps
	}
	return 0
}

func (x *SystemInterfaceUtilization) GetMaxIfcTxUtilization() uint32 {
	if x != nil && x.MaxIfcTxUtilization != nil {
		return *x.MaxIfcTxUtilization
	}
	return 0
}

func (x *SystemInterfaceUtilization) GetMaxIfcRxUtilization() uint32 {
	if x != nil && x.MaxIfcRxUtilization != nil {
		return *x.MaxIfcRxUtilization
	}
	return 0
}

func (x *SystemInterfaceUtilization) GetAggregateTxUtilization() uint32 {
	if x != nil && x.AggregateTxUtilization != nil {
		return *x.AggregateTxUtilization
	}
	return 0
}

func (x *SystemInterfaceUtilization) GetAggregateRxUtilization() uint32 {
	if x != nil && x.AggregateRxUtilization != nil {
		return *x.AggregateRxUtilization
	}
	return 0
}

type ProbeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Property []*ProbeProperty `protobuf:"bytes,1,rep,name=property" json:"property,omitempty"`
	// Types that are assignable to Value:
	//	*ProbeMessage_Int64Value
	//	*ProbeMessage_FloatValue
	//	*ProbeMessage_StringValue
	//	*ProbeMessage_EvpnType3RouteState
	//	*ProbeMessage_EvpnType5RouteState
	//	*ProbeMessage_InterfaceCountersUtilization
	//	*ProbeMessage_SystemInterfaceUtilization
	//	*ProbeMessage_ActiveFloodlist
	Value       isProbeMessage_Value `protobuf_oneof:"value"`
	ProbeId     *string              `protobuf:"bytes,5,req,name=probe_id,json=probeId" json:"probe_id,omitempty"`
	StageName   *string              `protobuf:"bytes,6,req,name=stage_name,json=stageName" json:"stage_name,omitempty"`
	BlueprintId *string              `protobuf:"bytes,7,req,name=blueprint_id,json=blueprintId" json:"blueprint_id,omitempty"`
	ItemId      *string              `protobuf:"bytes,8,req,name=item_id,json=itemId" json:"item_id,omitempty"`
	ProbeLabel  *string              `protobuf:"bytes,14,opt,name=probe_label,json=probeLabel" json:"probe_label,omitempty"`
}

func (x *ProbeMessage) Reset() {
	*x = ProbeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProbeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProbeMessage) ProtoMessage() {}

func (x *ProbeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProbeMessage.ProtoReflect.Descriptor instead.
func (*ProbeMessage) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{47}
}

func (x *ProbeMessage) GetProperty() []*ProbeProperty {
	if x != nil {
		return x.Property
	}
	return nil
}

func (m *ProbeMessage) GetValue() isProbeMessage_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ProbeMessage) GetInt64Value() int64 {
	if x, ok := x.GetValue().(*ProbeMessage_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (x *ProbeMessage) GetFloatValue() float32 {
	if x, ok := x.GetValue().(*ProbeMessage_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (x *ProbeMessage) GetStringValue() string {
	if x, ok := x.GetValue().(*ProbeMessage_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *ProbeMessage) GetEvpnType3RouteState() *EvpnType3RouteEvent {
	if x, ok := x.GetValue().(*ProbeMessage_EvpnType3RouteState); ok {
		return x.EvpnType3RouteState
	}
	return nil
}

func (x *ProbeMessage) GetEvpnType5RouteState() *EvpnType5RouteEvent {
	if x, ok := x.GetValue().(*ProbeMessage_EvpnType5RouteState); ok {
		return x.EvpnType5RouteState
	}
	return nil
}

func (x *ProbeMessage) GetInterfaceCountersUtilization() *InterfaceCountersUtilization {
	if x, ok := x.GetValue().(*ProbeMessage_InterfaceCountersUtilization); ok {
		return x.InterfaceCountersUtilization
	}
	return nil
}

func (x *ProbeMessage) GetSystemInterfaceUtilization() *SystemInterfaceUtilization {
	if x, ok := x.GetValue().(*ProbeMessage_SystemInterfaceUtilization); ok {
		return x.SystemInterfaceUtilization
	}
	return nil
}

func (x *ProbeMessage) GetActiveFloodlist() *ActiveFloodlistEvent {
	if x, ok := x.GetValue().(*ProbeMessage_ActiveFloodlist); ok {
		return x.ActiveFloodlist
	}
	return nil
}

func (x *ProbeMessage) GetProbeId() string {
	if x != nil && x.ProbeId != nil {
		return *x.ProbeId
	}
	return ""
}

func (x *ProbeMessage) GetStageName() string {
	if x != nil && x.StageName != nil {
		return *x.StageName
	}
	return ""
}

func (x *ProbeMessage) GetBlueprintId() string {
	if x != nil && x.BlueprintId != nil {
		return *x.BlueprintId
	}
	return ""
}

func (x *ProbeMessage) GetItemId() string {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return ""
}

func (x *ProbeMessage) GetProbeLabel() string {
	if x != nil && x.ProbeLabel != nil {
		return *x.ProbeLabel
	}
	return ""
}

type isProbeMessage_Value interface {
	isProbeMessage_Value()
}

type ProbeMessage_Int64Value struct {
	Int64Value int64 `protobuf:"varint,2,opt,name=int64_value,json=int64Value,oneof"`
}

type ProbeMessage_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,3,opt,name=float_value,json=floatValue,oneof"`
}

type ProbeMessage_StringValue struct {
	StringValue string `protobuf:"bytes,4,opt,name=string_value,json=stringValue,oneof"`
}

type ProbeMessage_EvpnType3RouteState struct {
	EvpnType3RouteState *EvpnType3RouteEvent `protobuf:"bytes,9,opt,name=evpn_type3_route_state,json=evpnType3RouteState,oneof"`
}

type ProbeMessage_EvpnType5RouteState struct {
	EvpnType5RouteState *EvpnType5RouteEvent `protobuf:"bytes,10,opt,name=evpn_type5_route_state,json=evpnType5RouteState,oneof"`
}

type ProbeMessage_InterfaceCountersUtilization struct {
	InterfaceCountersUtilization *InterfaceCountersUtilization `protobuf:"bytes,11,opt,name=interface_counters_utilization,json=interfaceCountersUtilization,oneof"`
}

type ProbeMessage_SystemInterfaceUtilization struct {
	SystemInterfaceUtilization *SystemInterfaceUtilization `protobuf:"bytes,12,opt,name=system_interface_utilization,json=systemInterfaceUtilization,oneof"`
}

type ProbeMessage_ActiveFloodlist struct {
	ActiveFloodlist *ActiveFloodlistEvent `protobuf:"bytes,13,opt,name=active_floodlist,json=activeFloodlist,oneof"`
}

func (*ProbeMessage_Int64Value) isProbeMessage_Value() {}

func (*ProbeMessage_FloatValue) isProbeMessage_Value() {}

func (*ProbeMessage_StringValue) isProbeMessage_Value() {}

func (*ProbeMessage_EvpnType3RouteState) isProbeMessage_Value() {}

func (*ProbeMessage_EvpnType5RouteState) isProbeMessage_Value() {}

func (*ProbeMessage_InterfaceCountersUtilization) isProbeMessage_Value() {}

func (*ProbeMessage_SystemInterfaceUtilization) isProbeMessage_Value() {}

func (*ProbeMessage_ActiveFloodlist) isProbeMessage_Value() {}

type GenericPerfmonMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags   []*Tag   `protobuf:"bytes,1,rep,name=tags" json:"tags,omitempty"`
	Fields []*Field `protobuf:"bytes,2,rep,name=fields" json:"fields,omitempty"`
}

func (x *GenericPerfmonMessage) Reset() {
	*x = GenericPerfmonMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericPerfmonMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericPerfmonMessage) ProtoMessage() {}

func (x *GenericPerfmonMessage) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericPerfmonMessage.ProtoReflect.Descriptor instead.
func (*GenericPerfmonMessage) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{48}
}

func (x *GenericPerfmonMessage) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *GenericPerfmonMessage) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

type ProbeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags   []*Tag   `protobuf:"bytes,1,rep,name=tags" json:"tags,omitempty"`
	Fields []*Field `protobuf:"bytes,2,rep,name=fields" json:"fields,omitempty"`
}

func (x *ProbeData) Reset() {
	*x = ProbeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProbeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProbeData) ProtoMessage() {}

func (x *ProbeData) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProbeData.ProtoReflect.Descriptor instead.
func (*ProbeData) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{49}
}

func (x *ProbeData) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ProbeData) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

type PerfMon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//	*PerfMon_InterfaceCounters
	//	*PerfMon_SystemResourceCounters
	//	*PerfMon_Generic
	//	*PerfMon_ProbeMessage
	Data      isPerfMon_Data `protobuf_oneof:"data"`
	TimeDelta *float32       `protobuf:"fixed32,3,opt,name=time_delta,json=timeDelta" json:"time_delta,omitempty"`
}

func (x *PerfMon) Reset() {
	*x = PerfMon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerfMon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerfMon) ProtoMessage() {}

func (x *PerfMon) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerfMon.ProtoReflect.Descriptor instead.
func (*PerfMon) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{50}
}

func (m *PerfMon) GetData() isPerfMon_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *PerfMon) GetInterfaceCounters() *InterfaceCounters {
	if x, ok := x.GetData().(*PerfMon_InterfaceCounters); ok {
		return x.InterfaceCounters
	}
	return nil
}

func (x *PerfMon) GetSystemResourceCounters() *SysResourceCounters {
	if x, ok := x.GetData().(*PerfMon_SystemResourceCounters); ok {
		return x.SystemResourceCounters
	}
	return nil
}

func (x *PerfMon) GetGeneric() *GenericPerfmonMessage {
	if x, ok := x.GetData().(*PerfMon_Generic); ok {
		return x.Generic
	}
	return nil
}

func (x *PerfMon) GetProbeMessage() *ProbeMessage {
	if x, ok := x.GetData().(*PerfMon_ProbeMessage); ok {
		return x.ProbeMessage
	}
	return nil
}

func (x *PerfMon) GetTimeDelta() float32 {
	if x != nil && x.TimeDelta != nil {
		return *x.TimeDelta
	}
	return 0
}

type isPerfMon_Data interface {
	isPerfMon_Data()
}

type PerfMon_InterfaceCounters struct {
	InterfaceCounters *InterfaceCounters `protobuf:"bytes,1,opt,name=interface_counters,json=interfaceCounters,oneof"`
}

type PerfMon_SystemResourceCounters struct {
	SystemResourceCounters *SysResourceCounters `protobuf:"bytes,2,opt,name=system_resource_counters,json=systemResourceCounters,oneof"`
}

type PerfMon_Generic struct {
	Generic *GenericPerfmonMessage `protobuf:"bytes,4,opt,name=generic,oneof"`
}

type PerfMon_ProbeMessage struct {
	ProbeMessage *ProbeMessage `protobuf:"bytes,5,opt,name=probe_message,json=probeMessage,oneof"`
}

func (*PerfMon_InterfaceCounters) isPerfMon_Data() {}

func (*PerfMon_SystemResourceCounters) isPerfMon_Data() {}

func (*PerfMon_Generic) isPerfMon_Data() {}

func (*PerfMon_ProbeMessage) isPerfMon_Data() {}

type Alert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Severity  *AlertSeverity `protobuf:"varint,1,req,name=severity,enum=aos.streaming.AlertSeverity" json:"severity,omitempty"`
	FirstSeen *uint64        `protobuf:"varint,2,req,name=first_seen,json=firstSeen" json:"first_seen,omitempty"` // in microseconds since the epoch
	Id        *string        `protobuf:"bytes,3,req,name=id" json:"id,omitempty"`                                 // uuid
	Raised    *bool          `protobuf:"varint,4,req,name=raised" json:"raised,omitempty"`                        // true if raised, false if cleared
	// Types that are assignable to Data:
	//	*Alert_ConfigDeviationAlert
	//	*Alert_StreamingAlert
	//	*Alert_CablePeerMismatchAlert
	//	*Alert_BgpNeighborMismatchAlert
	//	*Alert_InterfaceLinkStatusMismatchAlert
	//	*Alert_HostnameAlert
	//	*Alert_RouteAlert
	//	*Alert_LivenessAlert
	//	*Alert_DeploymentAlert
	//	*Alert_BlueprintRenderingAlert
	//	*Alert_CountersAlert
	//	*Alert_MacAlert
	//	*Alert_ArpAlert
	//	*Alert_HeadroomAlert
	//	*Alert_LagAlert
	//	*Alert_MlagAlert
	//	*Alert_ProbeAlert
	//	*Alert_ConfigMismatchAlert
	//	*Alert_ExtensibleAlert
	//	*Alert_TestAlert
	Data isAlert_Data `protobuf_oneof:"data"`
}

func (x *Alert) Reset() {
	*x = Alert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Alert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alert) ProtoMessage() {}

func (x *Alert) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alert.ProtoReflect.Descriptor instead.
func (*Alert) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{51}
}

func (x *Alert) GetSeverity() AlertSeverity {
	if x != nil && x.Severity != nil {
		return *x.Severity
	}
	return AlertSeverity_ALERT_LOW
}

func (x *Alert) GetFirstSeen() uint64 {
	if x != nil && x.FirstSeen != nil {
		return *x.FirstSeen
	}
	return 0
}

func (x *Alert) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Alert) GetRaised() bool {
	if x != nil && x.Raised != nil {
		return *x.Raised
	}
	return false
}

func (m *Alert) GetData() isAlert_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *Alert) GetConfigDeviationAlert() *ConfigDeviationAlert {
	if x, ok := x.GetData().(*Alert_ConfigDeviationAlert); ok {
		return x.ConfigDeviationAlert
	}
	return nil
}

func (x *Alert) GetStreamingAlert() *StreamingAlert {
	if x, ok := x.GetData().(*Alert_StreamingAlert); ok {
		return x.StreamingAlert
	}
	return nil
}

func (x *Alert) GetCablePeerMismatchAlert() *CablePeerMismatchAlert {
	if x, ok := x.GetData().(*Alert_CablePeerMismatchAlert); ok {
		return x.CablePeerMismatchAlert
	}
	return nil
}

func (x *Alert) GetBgpNeighborMismatchAlert() *BGPNeighborMismatchAlert {
	if x, ok := x.GetData().(*Alert_BgpNeighborMismatchAlert); ok {
		return x.BgpNeighborMismatchAlert
	}
	return nil
}

func (x *Alert) GetInterfaceLinkStatusMismatchAlert() *InterfaceLinkStatusMismatchAlert {
	if x, ok := x.GetData().(*Alert_InterfaceLinkStatusMismatchAlert); ok {
		return x.InterfaceLinkStatusMismatchAlert
	}
	return nil
}

func (x *Alert) GetHostnameAlert() *HostnameAlert {
	if x, ok := x.GetData().(*Alert_HostnameAlert); ok {
		return x.HostnameAlert
	}
	return nil
}

func (x *Alert) GetRouteAlert() *RouteAlert {
	if x, ok := x.GetData().(*Alert_RouteAlert); ok {
		return x.RouteAlert
	}
	return nil
}

func (x *Alert) GetLivenessAlert() *LivenessAlert {
	if x, ok := x.GetData().(*Alert_LivenessAlert); ok {
		return x.LivenessAlert
	}
	return nil
}

func (x *Alert) GetDeploymentAlert() *DeploymentAlert {
	if x, ok := x.GetData().(*Alert_DeploymentAlert); ok {
		return x.DeploymentAlert
	}
	return nil
}

func (x *Alert) GetBlueprintRenderingAlert() *BlueprintRenderingAlert {
	if x, ok := x.GetData().(*Alert_BlueprintRenderingAlert); ok {
		return x.BlueprintRenderingAlert
	}
	return nil
}

func (x *Alert) GetCountersAlert() *CountersAlert {
	if x, ok := x.GetData().(*Alert_CountersAlert); ok {
		return x.CountersAlert
	}
	return nil
}

func (x *Alert) GetMacAlert() *MacAlert {
	if x, ok := x.GetData().(*Alert_MacAlert); ok {
		return x.MacAlert
	}
	return nil
}

func (x *Alert) GetArpAlert() *ArpAlert {
	if x, ok := x.GetData().(*Alert_ArpAlert); ok {
		return x.ArpAlert
	}
	return nil
}

func (x *Alert) GetHeadroomAlert() *HeadroomAlert {
	if x, ok := x.GetData().(*Alert_HeadroomAlert); ok {
		return x.HeadroomAlert
	}
	return nil
}

func (x *Alert) GetLagAlert() *LagAlert {
	if x, ok := x.GetData().(*Alert_LagAlert); ok {
		return x.LagAlert
	}
	return nil
}

func (x *Alert) GetMlagAlert() *MlagAlert {
	if x, ok := x.GetData().(*Alert_MlagAlert); ok {
		return x.MlagAlert
	}
	return nil
}

func (x *Alert) GetProbeAlert() *ProbeAlert {
	if x, ok := x.GetData().(*Alert_ProbeAlert); ok {
		return x.ProbeAlert
	}
	return nil
}

func (x *Alert) GetConfigMismatchAlert() *ConfigMismatchAlert {
	if x, ok := x.GetData().(*Alert_ConfigMismatchAlert); ok {
		return x.ConfigMismatchAlert
	}
	return nil
}

func (x *Alert) GetExtensibleAlert() *ExtensibleAlert {
	if x, ok := x.GetData().(*Alert_ExtensibleAlert); ok {
		return x.ExtensibleAlert
	}
	return nil
}

func (x *Alert) GetTestAlert() *TestAlert {
	if x, ok := x.GetData().(*Alert_TestAlert); ok {
		return x.TestAlert
	}
	return nil
}

type isAlert_Data interface {
	isAlert_Data()
}

type Alert_ConfigDeviationAlert struct {
	ConfigDeviationAlert *ConfigDeviationAlert `protobuf:"bytes,5,opt,name=config_deviation_alert,json=configDeviationAlert,oneof"`
}

type Alert_StreamingAlert struct {
	StreamingAlert *StreamingAlert `protobuf:"bytes,6,opt,name=streaming_alert,json=streamingAlert,oneof"`
}

type Alert_CablePeerMismatchAlert struct {
	CablePeerMismatchAlert *CablePeerMismatchAlert `protobuf:"bytes,7,opt,name=cable_peer_mismatch_alert,json=cablePeerMismatchAlert,oneof"`
}

type Alert_BgpNeighborMismatchAlert struct {
	BgpNeighborMismatchAlert *BGPNeighborMismatchAlert `protobuf:"bytes,8,opt,name=bgp_neighbor_mismatch_alert,json=bgpNeighborMismatchAlert,oneof"`
}

type Alert_InterfaceLinkStatusMismatchAlert struct {
	InterfaceLinkStatusMismatchAlert *InterfaceLinkStatusMismatchAlert `protobuf:"bytes,9,opt,name=interface_link_status_mismatch_alert,json=interfaceLinkStatusMismatchAlert,oneof"`
}

type Alert_HostnameAlert struct {
	HostnameAlert *HostnameAlert `protobuf:"bytes,10,opt,name=hostname_alert,json=hostnameAlert,oneof"`
}

type Alert_RouteAlert struct {
	RouteAlert *RouteAlert `protobuf:"bytes,11,opt,name=route_alert,json=routeAlert,oneof"`
}

type Alert_LivenessAlert struct {
	LivenessAlert *LivenessAlert `protobuf:"bytes,12,opt,name=liveness_alert,json=livenessAlert,oneof"`
}

type Alert_DeploymentAlert struct {
	DeploymentAlert *DeploymentAlert `protobuf:"bytes,13,opt,name=deployment_alert,json=deploymentAlert,oneof"`
}

type Alert_BlueprintRenderingAlert struct {
	BlueprintRenderingAlert *BlueprintRenderingAlert `protobuf:"bytes,14,opt,name=blueprint_rendering_alert,json=blueprintRenderingAlert,oneof"`
}

type Alert_CountersAlert struct {
	CountersAlert *CountersAlert `protobuf:"bytes,15,opt,name=counters_alert,json=countersAlert,oneof"`
}

type Alert_MacAlert struct {
	MacAlert *MacAlert `protobuf:"bytes,16,opt,name=mac_alert,json=macAlert,oneof"`
}

type Alert_ArpAlert struct {
	ArpAlert *ArpAlert `protobuf:"bytes,17,opt,name=arp_alert,json=arpAlert,oneof"`
}

type Alert_HeadroomAlert struct {
	// TODO(Rajeev): Headroom alert is obsoleted. The alert has to be removed
	// the next time backward compatibility breaking changes are made.
	HeadroomAlert *HeadroomAlert `protobuf:"bytes,18,opt,name=headroom_alert,json=headroomAlert,oneof"`
}

type Alert_LagAlert struct {
	LagAlert *LagAlert `protobuf:"bytes,19,opt,name=lag_alert,json=lagAlert,oneof"`
}

type Alert_MlagAlert struct {
	MlagAlert *MlagAlert `protobuf:"bytes,20,opt,name=mlag_alert,json=mlagAlert,oneof"`
}

type Alert_ProbeAlert struct {
	ProbeAlert *ProbeAlert `protobuf:"bytes,21,opt,name=probe_alert,json=probeAlert,oneof"`
}

type Alert_ConfigMismatchAlert struct {
	ConfigMismatchAlert *ConfigMismatchAlert `protobuf:"bytes,22,opt,name=config_mismatch_alert,json=configMismatchAlert,oneof"`
}

type Alert_ExtensibleAlert struct {
	ExtensibleAlert *ExtensibleAlert `protobuf:"bytes,23,opt,name=extensible_alert,json=extensibleAlert,oneof"`
}

type Alert_TestAlert struct {
	TestAlert *TestAlert `protobuf:"bytes,1000,opt,name=test_alert,json=testAlert,oneof"`
}

func (*Alert_ConfigDeviationAlert) isAlert_Data() {}

func (*Alert_StreamingAlert) isAlert_Data() {}

func (*Alert_CablePeerMismatchAlert) isAlert_Data() {}

func (*Alert_BgpNeighborMismatchAlert) isAlert_Data() {}

func (*Alert_InterfaceLinkStatusMismatchAlert) isAlert_Data() {}

func (*Alert_HostnameAlert) isAlert_Data() {}

func (*Alert_RouteAlert) isAlert_Data() {}

func (*Alert_LivenessAlert) isAlert_Data() {}

func (*Alert_DeploymentAlert) isAlert_Data() {}

func (*Alert_BlueprintRenderingAlert) isAlert_Data() {}

func (*Alert_CountersAlert) isAlert_Data() {}

func (*Alert_MacAlert) isAlert_Data() {}

func (*Alert_ArpAlert) isAlert_Data() {}

func (*Alert_HeadroomAlert) isAlert_Data() {}

func (*Alert_LagAlert) isAlert_Data() {}

func (*Alert_MlagAlert) isAlert_Data() {}

func (*Alert_ProbeAlert) isAlert_Data() {}

func (*Alert_ConfigMismatchAlert) isAlert_Data() {}

func (*Alert_ExtensibleAlert) isAlert_Data() {}

func (*Alert_TestAlert) isAlert_Data() {}

type AosMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp      *uint64 `protobuf:"varint,1,req,name=timestamp" json:"timestamp,omitempty"`                    // in microseconds since the epoch
	OriginName     *string `protobuf:"bytes,2,req,name=origin_name,json=originName" json:"origin_name,omitempty"` // originating entity name
	OriginHostname *string `protobuf:"bytes,6,opt,name=origin_hostname,json=originHostname" json:"origin_hostname,omitempty"`
	OriginRole     *string `protobuf:"bytes,7,opt,name=origin_role,json=originRole" json:"origin_role,omitempty"`
	BlueprintLabel *string `protobuf:"bytes,8,opt,name=blueprint_label,json=blueprintLabel" json:"blueprint_label,omitempty"`
	// Types that are assignable to Data:
	//	*AosMessage_Alert
	//	*AosMessage_Event
	//	*AosMessage_PerfMon
	Data isAosMessage_Data `protobuf_oneof:"data"`
}

func (x *AosMessage) Reset() {
	*x = AosMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AosMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AosMessage) ProtoMessage() {}

func (x *AosMessage) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AosMessage.ProtoReflect.Descriptor instead.
func (*AosMessage) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{52}
}

func (x *AosMessage) GetTimestamp() uint64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *AosMessage) GetOriginName() string {
	if x != nil && x.OriginName != nil {
		return *x.OriginName
	}
	return ""
}

func (x *AosMessage) GetOriginHostname() string {
	if x != nil && x.OriginHostname != nil {
		return *x.OriginHostname
	}
	return ""
}

func (x *AosMessage) GetOriginRole() string {
	if x != nil && x.OriginRole != nil {
		return *x.OriginRole
	}
	return ""
}

func (x *AosMessage) GetBlueprintLabel() string {
	if x != nil && x.BlueprintLabel != nil {
		return *x.BlueprintLabel
	}
	return ""
}

func (m *AosMessage) GetData() isAosMessage_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *AosMessage) GetAlert() *Alert {
	if x, ok := x.GetData().(*AosMessage_Alert); ok {
		return x.Alert
	}
	return nil
}

func (x *AosMessage) GetEvent() *Event {
	if x, ok := x.GetData().(*AosMessage_Event); ok {
		return x.Event
	}
	return nil
}

func (x *AosMessage) GetPerfMon() *PerfMon {
	if x, ok := x.GetData().(*AosMessage_PerfMon); ok {
		return x.PerfMon
	}
	return nil
}

type isAosMessage_Data interface {
	isAosMessage_Data()
}

type AosMessage_Alert struct {
	Alert *Alert `protobuf:"bytes,3,opt,name=alert,oneof"`
}

type AosMessage_Event struct {
	Event *Event `protobuf:"bytes,4,opt,name=event,oneof"`
}

type AosMessage_PerfMon struct {
	PerfMon *PerfMon `protobuf:"bytes,5,opt,name=perf_mon,json=perfMon,oneof"`
}

func (*AosMessage_Alert) isAosMessage_Data() {}

func (*AosMessage_Event) isAosMessage_Data() {}

func (*AosMessage_PerfMon) isAosMessage_Data() {}

type AosSequencedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqNum *uint64 `protobuf:"varint,1,opt,name=seq_num,json=seqNum" json:"seq_num,omitempty"`
	// space for preceding fields
	AosProto []byte `protobuf:"bytes,15,opt,name=aos_proto,json=aosProto" json:"aos_proto,omitempty"` // serialized AosMessage
}

func (x *AosSequencedMessage) Reset() {
	*x = AosSequencedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apstra_streaming_telemetry_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AosSequencedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AosSequencedMessage) ProtoMessage() {}

func (x *AosSequencedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_apstra_streaming_telemetry_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AosSequencedMessage.ProtoReflect.Descriptor instead.
func (*AosSequencedMessage) Descriptor() ([]byte, []int) {
	return file_apstra_streaming_telemetry_proto_rawDescGZIP(), []int{53}
}

func (x *AosSequencedMessage) GetSeqNum() uint64 {
	if x != nil && x.SeqNum != nil {
		return *x.SeqNum
	}
	return 0
}

func (x *AosSequencedMessage) GetAosProto() []byte {
	if x != nil {
		return x.AosProto
	}
	return nil
}

var File_apstra_streaming_telemetry_proto protoreflect.FileDescriptor

var file_apstra_streaming_telemetry_proto_rawDesc = []byte{
	0x0a, 0x20, 0x61, 0x70, 0x73, 0x74, 0x72, 0x61, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x2d, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0d, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x22, 0x44, 0x0a, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xd0, 0x03, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x6f,
	0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12,
	0x35, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x04,
	0x6e, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f,
	0x64, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x70, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x03, 0x70, 0x6f, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x10,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x08, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x01, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x6e, 0x6f,
	0x6e, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x01, 0x52, 0x12, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x4e, 0x6f, 0x6e, 0x6e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x42, 0x07, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x22, 0xbb, 0x02, 0x0a, 0x0e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x6f, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x6f, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x0e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x3c, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12,
	0x36, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4f, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x26, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xdb, 0x01, 0x0a, 0x0e, 0x43, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x65, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x6c,
	0x63, 0x6c, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x0b, 0x6c, 0x63, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x6c, 0x63, 0x6c, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x63, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x63, 0x6c, 0x5f, 0x69, 0x66, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x63, 0x6c, 0x49, 0x66, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6d, 0x74, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x6d, 0x74, 0x48, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6d, 0x74, 0x5f, 0x69, 0x66, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x72, 0x6d, 0x74, 0x49, 0x66, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6d, 0x74, 0x5f, 0x73, 0x79, 0x73, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x18, 0x06, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x6d, 0x74, 0x53, 0x79,
	0x73, 0x64, 0x65, 0x73, 0x63, 0x72, 0x22, 0xbf, 0x02, 0x0a, 0x10, 0x42, 0x47, 0x50, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6c,
	0x63, 0x6c, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x0b, 0x6c, 0x63, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x6c, 0x63, 0x6c, 0x5f, 0x69, 0x70, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x09, 0x6c, 0x63, 0x6c, 0x49, 0x70, 0x61, 0x64, 0x64, 0x72, 0x12, 0x17, 0x0a,
	0x07, 0x6c, 0x63, 0x6c, 0x5f, 0x61, 0x73, 0x6e, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06,
	0x6c, 0x63, 0x6c, 0x41, 0x73, 0x6e, 0x12, 0x34, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x6d, 0x74, 0x5f, 0x69, 0x70, 0x61, 0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x6d, 0x74, 0x49, 0x70, 0x61, 0x64, 0x64, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x72,
	0x6d, 0x74, 0x5f, 0x61, 0x73, 0x6e, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x6d,
	0x74, 0x41, 0x73, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x72, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x76, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x47, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x08,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x52, 0x0a, 0x61, 0x64,
	0x64, 0x72, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x22, 0x76, 0x0a, 0x0f, 0x4c, 0x69, 0x6e, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x66, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x69, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x4c,
	0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x22, 0x89, 0x01, 0x0a, 0x08, 0x4d, 0x61, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x6d, 0x61, 0x63, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6e, 0x74, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x6e, 0x74, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6c, 0x61,
	0x6e, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x2d, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61,
	0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x61, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x9f, 0x01, 0x0a,
	0x08, 0x41, 0x72, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x70, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74,
	0x66, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x74,
	0x66, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x72, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x72, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x76, 0x72, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x92,
	0x01, 0x0a, 0x08, 0x4c, 0x61, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x61, 0x67, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x61, 0x67, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x75,
	0x70, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x11, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x75, 0x70, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x75, 0x70, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x75, 0x70, 0x22, 0xc4, 0x01, 0x0a, 0x09, 0x4d, 0x6c, 0x61, 0x67, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x41,
	0x0a, 0x0c, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x6c, 0x61, 0x67, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a,
	0x0a, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x4d, 0x6c, 0x61, 0x67, 0x49, 0x6e, 0x74, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x09, 0x69, 0x6e, 0x74, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x40, 0x0a, 0x16, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x84, 0x01, 0x0a,
	0x0a, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x65, 0x73, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x37,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x13, 0x45, 0x76, 0x70, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x33, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x61, 0x6f, 0x73,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x6e, 0x69,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x03, 0x76, 0x6e, 0x69, 0x12, 0x19, 0x0a, 0x08, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x6e,
	0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x64, 0x18, 0x05, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x02, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x74, 0x18, 0x06, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x02, 0x72, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x14, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x2f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x08, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x76, 0x6e, 0x69, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x03, 0x76, 0x6e, 0x69, 0x12,
	0x12, 0x0a, 0x04, 0x76, 0x74, 0x65, 0x70, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x76,
	0x74, 0x65, 0x70, 0x22, 0xc6, 0x01, 0x0a, 0x13, 0x45, 0x76, 0x70, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x35, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x61, 0x6f, 0x73,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x66, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x02, 0x61, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x18, 0x05, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x12, 0x0e, 0x0a, 0x02,
	0x72, 0x64, 0x18, 0x06, 0x20, 0x02, 0x28, 0x09, 0x52, 0x02, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x72, 0x74, 0x18, 0x07, 0x20, 0x02, 0x28, 0x09, 0x52, 0x02, 0x72, 0x74, 0x22, 0x9b, 0x06, 0x0a,
	0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61,
	0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x09,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x0a, 0x63,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x43, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x65, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x09, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x65, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0c, 0x62,
	0x67, 0x70, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x42, 0x47, 0x50, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x12, 0x41, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x12, 0x36, 0x0a,
	0x09, 0x6d, 0x61, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x4d, 0x61, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x61, 0x72, 0x70, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x72, 0x70, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x08, 0x61, 0x72, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a,
	0x09, 0x6c, 0x61, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x4c, 0x61, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x61, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x6d, 0x6c, 0x61, 0x67, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x6f, 0x73, 0x2e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x6c, 0x61, 0x67, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x6c, 0x61, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x52, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6f, 0x73,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x6f, 0x73, 0x2e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x65, 0x0a, 0x0d, 0x48, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x65,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x16, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x76, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x22, 0x73, 0x0a, 0x0d, 0x4c, 0x69, 0x76,
	0x65, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x76,
	0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x22, 0x57,
	0x0a, 0x0f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x22, 0xcb, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x5d, 0x0a, 0x1a, 0x65,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x1f, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x18, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x59, 0x0a, 0x18, 0x61, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61,
	0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x16, 0x61,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x40, 0x0a, 0x17, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xbe, 0x01, 0x0a, 0x0a, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x51, 0x0a, 0x14, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x12, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44,
	0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4d, 0x0a, 0x12, 0x61, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x65,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x84, 0x02, 0x0a, 0x08, 0x4c, 0x61, 0x67,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x61, 0x67, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x07, 0x6c, 0x61, 0x67, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x65,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x66, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x11, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x49, 0x66, 0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x61,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x69, 0x66, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x66,
	0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x75,
	0x70, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x55, 0x70, 0x12, 0x30, 0x0a,
	0x14, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x5f, 0x75, 0x70, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x61, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x55, 0x70, 0x22,
	0xc0, 0x02, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6f, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6f, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x43, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x6f, 0x73, 0x2e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x3b, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x4f, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x61, 0x6f, 0x73,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x4d, 0x6f,
	0x64, 0x65, 0x22, 0x81, 0x02, 0x0a, 0x16, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x65, 0x65, 0x72,
	0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x6c, 0x63, 0x6c, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x63, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x63, 0x6c, 0x5f, 0x69, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x63, 0x6c, 0x49, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x5f, 0x69, 0x66, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x70, 0x49, 0x66, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6d, 0x74, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x6d, 0x74, 0x48, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6d, 0x74, 0x5f, 0x69, 0x66, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x72, 0x6d, 0x74, 0x49, 0x66, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6d, 0x74, 0x5f, 0x73, 0x79, 0x73, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x18, 0x08, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x6d, 0x74, 0x53, 0x79,
	0x73, 0x64, 0x65, 0x73, 0x63, 0x72, 0x22, 0xb6, 0x03, 0x0a, 0x18, 0x42, 0x47, 0x50, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x63, 0x6c, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x63, 0x6c, 0x48, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x63, 0x6c, 0x5f, 0x69, 0x70,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x63, 0x6c, 0x49,
	0x70, 0x61, 0x64, 0x64, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x63, 0x6c, 0x5f, 0x61, 0x73, 0x6e,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x63, 0x6c, 0x41, 0x73, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x6d, 0x74, 0x5f, 0x69, 0x70, 0x61, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x6d, 0x74, 0x49, 0x70, 0x61, 0x64, 0x64, 0x72, 0x12, 0x17, 0x0a,
	0x07, 0x72, 0x6d, 0x74, 0x5f, 0x61, 0x73, 0x6e, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06,
	0x72, 0x6d, 0x74, 0x41, 0x73, 0x6e, 0x12, 0x45, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a,
	0x0c, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x6d, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x6d, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x76,
	0x72, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x66,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x61, 0x6f,
	0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x22,
	0xe2, 0x01, 0x0a, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x6e,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x69, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x06, 0x69, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x66, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x66, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x42, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x69, 0x66, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x61, 0x6f, 0x73, 0x2e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x66, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0xe4, 0x02, 0x0a, 0x0d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72,
	0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x6f, 0x73, 0x2e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x48, 0x00, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x35, 0x0a,
	0x09, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x6f, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65,
	0x12, 0x12, 0x0a, 0x03, 0x70, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x03, 0x70, 0x6f, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0f,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x49, 0x0a, 0x10, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0x0a, 0x02, 0x69, 0x64, 0x22, 0x36, 0x0a, 0x0c, 0x4b,
	0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xdb, 0x04, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x69,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x49, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x49, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x36,
	0x0a, 0x17, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x72,
	0x65, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x5f, 0x64, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x73,
	0x63, 0x72, 0x65, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x4b, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0d, 0x6b, 0x65, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62,
	0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x62, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x74,
	0x4d, 0x61, 0x78, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x10, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x4d, 0x61,
	0x78, 0x22, 0x5b, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x69, 0x73, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x75, 0x65,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b,
	0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0xaa,
	0x01, 0x0a, 0x0d, 0x48, 0x65, 0x61, 0x64, 0x72, 0x6f, 0x6f, 0x6d, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x12, 0x15, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x62, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x42, 0x12, 0x29,
	0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x68, 0x65, 0x61,
	0x64, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x72, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x68,
	0x65, 0x61, 0x64, 0x72, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x22, 0xde, 0x01, 0x0a, 0x08,
	0x4d, 0x61, 0x63, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61,
	0x63, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x66,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x66,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x65,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x6f, 0x76,
	0x65, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x05,
	0x20, 0x02, 0x28, 0x01, 0x52, 0x12, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x6f, 0x76, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x06, 0x20, 0x02, 0x28, 0x01, 0x52, 0x13, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x4d, 0x61, 0x78, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x56, 0x0a, 0x08,
	0x41, 0x72, 0x70, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x70, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x66,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x66,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb3, 0x04, 0x0a, 0x09, 0x4d, 0x6c, 0x61, 0x67, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6d,
	0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x6c,
	0x61, 0x67, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x15, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x6c, 0x61, 0x67, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x13, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x13, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x6c, 0x61, 0x67, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x11, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x66, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x69, 0x66, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x4c, 0x0a, 0x13, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74,
	0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x6c,
	0x61, 0x67, 0x49, 0x6e, 0x74, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x11, 0x65, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x48,
	0x0a, 0x11, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x6f, 0x73, 0x2e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x6c, 0x61, 0x67, 0x49, 0x6e,
	0x74, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x49,
	0x6e, 0x74, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x09, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x65,
	0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x0e, 0x70, 0x65, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x39, 0x0a, 0x19, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x16, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x65, 0x65, 0x72,
	0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x26, 0x0a, 0x09, 0x54, 0x65,
	0x73, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x07, 0x74, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x74, 0x22, 0xe2, 0x05, 0x0a, 0x11, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x78, 0x5f, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x04, 0x52, 0x10, 0x74, 0x78, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x78, 0x5f, 0x62, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x04, 0x52, 0x12, 0x74, 0x78, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x78, 0x5f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x04, 0x52, 0x12, 0x74, 0x78, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x78,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x02, 0x28, 0x04, 0x52, 0x07, 0x74, 0x78,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x78, 0x5f, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x02, 0x28,
	0x04, 0x52, 0x10, 0x72, 0x78, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x78, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x02, 0x28,
	0x04, 0x52, 0x12, 0x72, 0x78, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x78, 0x5f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x07, 0x20,
	0x02, 0x28, 0x04, 0x52, 0x12, 0x72, 0x78, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x78, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x02, 0x28, 0x04, 0x52, 0x07, 0x72, 0x78, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x09, 0x20, 0x02, 0x28, 0x04, 0x52, 0x0e, 0x74, 0x78,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12,
	0x74, 0x78, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x04, 0x52, 0x10, 0x74, 0x78, 0x44, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x78,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0b,
	0x20, 0x02, 0x28, 0x04, 0x52, 0x0e, 0x72, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x78, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x04,
	0x52, 0x10, 0x72, 0x78, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x02, 0x28, 0x04, 0x52, 0x0f, 0x61, 0x6c,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x63, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x02, 0x28,
	0x04, 0x52, 0x09, 0x66, 0x63, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0f, 0x20,
	0x02, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x10, 0x20, 0x02, 0x28, 0x04,
	0x52, 0x05, 0x72, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x69, 0x61, 0x6e, 0x74,
	0x73, 0x18, 0x11, 0x20, 0x02, 0x28, 0x04, 0x52, 0x06, 0x67, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x12,
	0x26, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x35, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x02, 0x52, 0x07, 0x63, 0x70, 0x75, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x70, 0x75, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x02, 0x52, 0x09, 0x63, 0x70, 0x75, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x12, 0x19, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x02, 0x52, 0x07, 0x63, 0x70, 0x75, 0x49, 0x64, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x04,
	0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x02,
	0x28, 0x04, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22,
	0x8b, 0x01, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x02, 0x52, 0x07, 0x63, 0x70, 0x75, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x70, 0x75, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x02, 0x52, 0x09, 0x63, 0x70, 0x75, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28,
	0x04, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x65, 0x64, 0x22, 0x44, 0x0a,
	0x08, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x04, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x13, 0x53, 0x79, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6f, 0x73, 0x2e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x8d, 0x01, 0x0a,
	0x03, 0x54, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52,
	0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23,
	0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8f, 0x01, 0x0a,
	0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a,
	0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x39,
	0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9f, 0x06, 0x0a, 0x1c, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x55,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x78,
	0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x04, 0x52, 0x0d, 0x74, 0x78, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x78, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x04, 0x52, 0x0d, 0x72, 0x78, 0x55, 0x74, 0x69,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x78, 0x5f, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x70, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x04,
	0x52, 0x0c, 0x74, 0x78, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x70, 0x73, 0x12, 0x28,
	0x0a, 0x10, 0x74, 0x78, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70,
	0x70, 0x73, 0x18, 0x04, 0x20, 0x02, 0x28, 0x04, 0x52, 0x0e, 0x74, 0x78, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x50, 0x70, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x78, 0x5f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x70, 0x73, 0x18, 0x05, 0x20, 0x02,
	0x28, 0x04, 0x52, 0x0e, 0x74, 0x78, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50,
	0x70, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78, 0x5f, 0x62, 0x70, 0x73, 0x18, 0x06, 0x20, 0x02,
	0x28, 0x04, 0x52, 0x05, 0x74, 0x78, 0x42, 0x70, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x78, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x70, 0x73, 0x18, 0x07, 0x20, 0x02, 0x28, 0x04, 0x52,
	0x0a, 0x74, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x70, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x74,
	0x78, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x70, 0x73, 0x18, 0x08, 0x20,
	0x02, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x78, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x50, 0x70,
	0x73, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x78, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x70, 0x70, 0x73, 0x18, 0x09, 0x20, 0x02, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x78, 0x55, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x50, 0x70, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x78, 0x5f, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x70, 0x73, 0x18, 0x0a, 0x20, 0x02, 0x28,
	0x04, 0x52, 0x0e, 0x72, 0x78, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x50, 0x70,
	0x73, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x78, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x70, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x02, 0x28, 0x04, 0x52, 0x0e, 0x72, 0x78, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x70, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x72,
	0x78, 0x5f, 0x62, 0x70, 0x73, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x04, 0x52, 0x05, 0x72, 0x78, 0x42,
	0x70, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x72, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70,
	0x70, 0x73, 0x18, 0x0d, 0x20, 0x02, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x78, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x50, 0x70, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x78, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x70, 0x70, 0x73, 0x18, 0x0e, 0x20, 0x02, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x78,
	0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x50, 0x70, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x61, 0x6c,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x0f, 0x20, 0x02, 0x28, 0x04, 0x52,
	0x18, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x66, 0x63, 0x73,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x18, 0x10, 0x20, 0x02, 0x28, 0x04, 0x52, 0x12, 0x66, 0x63, 0x73, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x37, 0x0a, 0x18,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x11, 0x20, 0x02, 0x28, 0x04, 0x52, 0x15,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x50, 0x65, 0x72, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x12, 0x20, 0x02, 0x28, 0x04, 0x52,
	0x0e, 0x72, 0x75, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x67, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x18, 0x13, 0x20, 0x02, 0x28, 0x04, 0x52, 0x0f, 0x67, 0x69, 0x61, 0x6e,
	0x74, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22, 0xce, 0x02, 0x0a, 0x1a,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x55,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x78, 0x5f, 0x62, 0x70, 0x73, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x54,
	0x78, 0x42, 0x70, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x5f, 0x72, 0x78, 0x5f, 0x62, 0x70, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0e,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x78, 0x42, 0x70, 0x73, 0x12, 0x33,
	0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x66, 0x63, 0x5f, 0x74, 0x78, 0x5f, 0x75, 0x74, 0x69,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x13,
	0x6d, 0x61, 0x78, 0x49, 0x66, 0x63, 0x54, 0x78, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x66, 0x63, 0x5f, 0x72,
	0x78, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x49, 0x66, 0x63, 0x52, 0x78, 0x55, 0x74, 0x69,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x78, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x16, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x54, 0x78, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f,
	0x72, 0x78, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x16, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52,
	0x78, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbf, 0x06, 0x0a,
	0x0c, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x50, 0x72, 0x6f, 0x62, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0a,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48,
	0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a,
	0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x59, 0x0a, 0x16, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x33,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x45, 0x76, 0x70, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x33, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x13, 0x65, 0x76, 0x70, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x33, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x59, 0x0a,
	0x16, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x35, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x76,
	0x70, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x35, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x13, 0x65, 0x76, 0x70, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x35, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x73, 0x0a, 0x1e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x75,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6d, 0x0a,
	0x1c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x1a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x10,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x46, 0x6c, 0x6f,
	0x6f, 0x64, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x75, 0x65,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b,
	0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x69, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x65,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x6d,
	0x0a, 0x15, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x50, 0x65, 0x72, 0x66, 0x6d, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12,
	0x2c, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x61, 0x0a,
	0x09, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x22, 0xe9, 0x02, 0x0a, 0x07, 0x50, 0x65, 0x72, 0x66, 0x4d, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x11, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x5e, 0x0a, 0x18, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x53, 0x79, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x16, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x40, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x50, 0x65, 0x72, 0x66, 0x6d, 0x6f, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x12, 0x42, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9a, 0x0d, 0x0a,
	0x05, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x04, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x61, 0x69, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x08, 0x52,
	0x06, 0x72, 0x61, 0x69, 0x73, 0x65, 0x64, 0x12, 0x5b, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65,
	0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x14,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x12, 0x48, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x62,
	0x0a, 0x19, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x73,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x65, 0x65, 0x72, 0x4d, 0x69, 0x73, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x16, 0x63, 0x61, 0x62, 0x6c,
	0x65, 0x50, 0x65, 0x65, 0x72, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x12, 0x68, 0x0a, 0x1b, 0x62, 0x67, 0x70, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x5f, 0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x47, 0x50, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x48, 0x00, 0x52, 0x18, 0x62, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4d,
	0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x81, 0x01, 0x0a,
	0x24, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x6f,
	0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d,
	0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x20,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x12, 0x45, 0x0a, 0x0e, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61,
	0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x45, 0x0a, 0x0e, 0x6c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69,
	0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x6c,
	0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x4b, 0x0a, 0x10,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x64, 0x0a, 0x19, 0x62, 0x6c, 0x75,
	0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61,
	0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x6c, 0x75,
	0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x17, 0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12,
	0x45, 0x0a, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6f, 0x73, 0x2e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x61, 0x63, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x63, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x36,
	0x0a, 0x09, 0x61, 0x72, 0x70, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x41, 0x72, 0x70, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x08, 0x61, 0x72,
	0x70, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x45, 0x0a, 0x0e, 0x68, 0x65, 0x61, 0x64, 0x72, 0x6f,
	0x6f, 0x6d, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x48,
	0x65, 0x61, 0x64, 0x72, 0x6f, 0x6f, 0x6d, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0d,
	0x68, 0x65, 0x61, 0x64, 0x72, 0x6f, 0x6f, 0x6d, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x36, 0x0a,
	0x09, 0x6c, 0x61, 0x67, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x4c, 0x61, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x61, 0x67,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x6d, 0x6c, 0x61, 0x67, 0x5f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x6f, 0x73, 0x2e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x6c, 0x61, 0x67, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x6c, 0x61, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x12, 0x3c, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x48, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x58,
	0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x48, 0x00, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x69, 0x73, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x4b, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x6f, 0x73,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x09, 0x74, 0x65, 0x73, 0x74, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd7, 0x02, 0x0a, 0x0a, 0x41, 0x6f,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x6f, 0x6c,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x6c, 0x75, 0x65,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x05, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x6f, 0x73, 0x2e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48,
	0x00, 0x52, 0x05, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x66, 0x5f, 0x6d,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x6f, 0x73, 0x2e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x4d, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x07, 0x70, 0x65, 0x72, 0x66, 0x4d, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x4b, 0x0a, 0x13, 0x41, 0x6f, 0x73, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65,
	0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x65, 0x71,
	0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x61, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2a, 0x86, 0x03, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x49, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x53, 0x5f,
	0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x43, 0x4f, 0x4d,
	0x4d, 0x53, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x53, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x10, 0x04, 0x12,
	0x1d, 0x0a, 0x19, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x49, 0x53, 0x5f, 0x52, 0x45, 0x42, 0x4f, 0x4f, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x1c,
	0x0a, 0x18, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f,
	0x4f, 0x53, 0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x06, 0x12, 0x20, 0x0a, 0x1c,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x4f, 0x53,
	0x5f, 0x51, 0x55, 0x41, 0x52, 0x41, 0x4e, 0x54, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x07, 0x12, 0x1a,
	0x0a, 0x16, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f,
	0x4f, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x4f, 0x53, 0x5f, 0x4e,
	0x4f, 0x43, 0x4f, 0x4d, 0x4d, 0x53, 0x10, 0x09, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x4f, 0x53, 0x5f, 0x44, 0x45, 0x43,
	0x4f, 0x4d, 0x4d, 0x10, 0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x4f, 0x53, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x10,
	0x0b, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x4f, 0x4f, 0x53, 0x5f, 0x52, 0x45, 0x42, 0x4f, 0x4f, 0x54, 0x49, 0x4e, 0x47, 0x10,
	0x0c, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0d, 0x2a, 0x8c, 0x04, 0x0a, 0x07, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x45,
	0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x4c, 0x4f, 0x30, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x46,
	0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x10, 0x02, 0x12,
	0x17, 0x0a, 0x13, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x4c, 0x45, 0x41, 0x46, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x45, 0x41, 0x54,
	0x55, 0x52, 0x45, 0x5f, 0x4c, 0x33, 0x45, 0x44, 0x47, 0x45, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e,
	0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x4c, 0x32, 0x45, 0x44, 0x47, 0x45, 0x10, 0x05,
	0x12, 0x16, 0x0a, 0x12, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x50, 0x49, 0x4e,
	0x45, 0x5f, 0x4c, 0x45, 0x41, 0x46, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x45, 0x41, 0x54,
	0x55, 0x52, 0x45, 0x5f, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x5f, 0x53, 0x50, 0x49, 0x4e, 0x45,
	0x10, 0x07, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x45, 0x58,
	0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x10, 0x08, 0x12,
	0x1e, 0x0a, 0x1a, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x45, 0x58,
	0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x10, 0x09, 0x12,
	0x1a, 0x0a, 0x16, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x4c, 0x45, 0x41, 0x46, 0x5f,
	0x4c, 0x33, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x46,
	0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x4c, 0x45, 0x41, 0x46, 0x5f, 0x4c, 0x32, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x0b, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x45, 0x41, 0x54, 0x55,
	0x52, 0x45, 0x5f, 0x4c, 0x45, 0x41, 0x46, 0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x45, 0x41,
	0x54, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x50, 0x49, 0x4e, 0x45, 0x10, 0x0d, 0x12, 0x15, 0x0a, 0x11,
	0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x4c, 0x33, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x52, 0x10, 0x0e, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x4c,
	0x32, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x0f, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x45,
	0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x10, 0x12, 0x10,
	0x0a, 0x0c, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x10, 0x11,
	0x12, 0x1a, 0x0a, 0x16, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x4c, 0x45, 0x41, 0x46,
	0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x12, 0x12, 0x15, 0x0a, 0x11,
	0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x4c, 0x45, 0x41, 0x46, 0x5f, 0x50, 0x41, 0x49,
	0x52, 0x10, 0x13, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x4c,
	0x45, 0x41, 0x46, 0x5f, 0x50, 0x41, 0x49, 0x52, 0x5f, 0x4c, 0x32, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x52, 0x10, 0x14, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f,
	0x55, 0x4e, 0x55, 0x53, 0x45, 0x44, 0x10, 0x15, 0x2a, 0x61, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x52,
	0x45, 0x41, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x46,
	0x4d, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x49,
	0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x01,
	0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x53, 0x10, 0x02, 0x2a, 0x3d, 0x0a, 0x11, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x12, 0x28, 0x0a, 0x24, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x42, 0x55, 0x46, 0x5f,
	0x4f, 0x56, 0x45, 0x52, 0x5f, 0x54, 0x43, 0x50, 0x10, 0x00, 0x2a, 0x45, 0x0a, 0x0f, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a,
	0x13, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x50, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d,
	0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10,
	0x01, 0x2a, 0x4d, 0x0a, 0x17, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x51, 0x55,
	0x45, 0x4e, 0x43, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x52, 0x45, 0x41,
	0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x45, 0x44, 0x10, 0x01,
	0x2a, 0x37, 0x0a, 0x17, 0x42, 0x67, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x49,
	0x50, 0x56, 0x34, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x56, 0x36, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x45, 0x56, 0x50, 0x4e, 0x10, 0x02, 0x2a, 0x4c, 0x0a, 0x0a, 0x4c, 0x69, 0x6e,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x49, 0x4e, 0x4b, 0x5f,
	0x55, 0x50, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x44, 0x4f, 0x57,
	0x4e, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x2a, 0x35, 0x0a, 0x08, 0x4d, 0x61, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x41, 0x43, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x41, 0x43, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x41, 0x43, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x02, 0x2a, 0x27,
	0x0a, 0x08, 0x41, 0x72, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x52,
	0x50, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x52, 0x50, 0x5f, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x2a, 0x6c, 0x0a, 0x0f, 0x4d, 0x6c, 0x61, 0x67, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x4c,
	0x41, 0x47, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c,
	0x4d, 0x4c, 0x41, 0x47, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x11,
	0x0a, 0x0d, 0x4d, 0x4c, 0x41, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x4c, 0x41, 0x47, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x4c, 0x41, 0x47, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x04, 0x2a, 0xc0, 0x01, 0x0a, 0x0d, 0x4d, 0x6c, 0x61, 0x67, 0x49, 0x6e,
	0x74, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x4c, 0x41, 0x47, 0x5f,
	0x49, 0x4e, 0x54, 0x46, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x15,
	0x0a, 0x11, 0x4d, 0x4c, 0x41, 0x47, 0x5f, 0x49, 0x4e, 0x54, 0x46, 0x5f, 0x4d, 0x49, 0x53, 0x53,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x4c, 0x41, 0x47, 0x5f, 0x49, 0x4e,
	0x54, 0x46, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x18, 0x0a,
	0x14, 0x4d, 0x4c, 0x41, 0x47, 0x5f, 0x49, 0x4e, 0x54, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x55, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x4c, 0x41, 0x47, 0x5f,
	0x49, 0x4e, 0x54, 0x46, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x04, 0x12,
	0x1c, 0x0a, 0x18, 0x4d, 0x4c, 0x41, 0x47, 0x5f, 0x49, 0x4e, 0x54, 0x46, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x19, 0x0a,
	0x15, 0x4d, 0x4c, 0x41, 0x47, 0x5f, 0x49, 0x4e, 0x54, 0x46, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x06, 0x2a, 0x2d, 0x0a, 0x0a, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f,
	0x41, 0x44, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x2a, 0x54, 0x0a, 0x0d, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x4c, 0x45, 0x52,
	0x54, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x4c, 0x45, 0x52, 0x54,
	0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x4c, 0x45,
	0x52, 0x54, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4c, 0x45,
	0x52, 0x54, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x03, 0x2a, 0x8d, 0x01,
	0x0a, 0x10, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x10, 0x01, 0x12, 0x1e, 0x0a,
	0x1a, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x1e, 0x0a,
	0x1a, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x2a, 0x61, 0x0a,
	0x0d, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b,
	0x0a, 0x17, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4e,
	0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x50, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x02,
	0x2a, 0x63, 0x0a, 0x09, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x12, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e,
	0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x47, 0x50, 0x10, 0x02,
	0x12, 0x13, 0x0a, 0x0f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x10, 0x03, 0x2a, 0x73, 0x0a, 0x10, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x45, 0x50,
	0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x4e, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x44,
	0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18,
	0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x2a, 0xba, 0x01, 0x0a, 0x14, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x49, 0x4e, 0x47,
	0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x00, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x41,
	0x4c, 0x45, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x4f, 0x55, 0x54, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x49,
	0x4e, 0x47, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x44, 0x4e, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x28, 0x0a,
	0x24, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x03, 0x2a, 0x6d, 0x0a, 0x0f, 0x42, 0x67, 0x70, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x47,
	0x50, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x42, 0x47, 0x50, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x4f,
	0x57, 0x4e, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x47, 0x50, 0x5f, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x17, 0x0a,
	0x13, 0x42, 0x47, 0x50, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x03, 0x2a, 0x93, 0x01, 0x0a, 0x0f, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x47,
	0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x41, 0x58, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x18,
	0x0a, 0x14, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x47, 0x47, 0x52,
	0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x56, 0x47,
	0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x44, 0x10, 0x05, 0x2a, 0x3c, 0x0a, 0x0c,
	0x48, 0x65, 0x61, 0x64, 0x72, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11,
	0x48, 0x45, 0x41, 0x44, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41,
	0x58, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x48, 0x45, 0x41, 0x44, 0x52, 0x4f, 0x4f, 0x4d, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x02,
}

var (
	file_apstra_streaming_telemetry_proto_rawDescOnce sync.Once
	file_apstra_streaming_telemetry_proto_rawDescData = file_apstra_streaming_telemetry_proto_rawDesc
)

func file_apstra_streaming_telemetry_proto_rawDescGZIP() []byte {
	file_apstra_streaming_telemetry_proto_rawDescOnce.Do(func() {
		file_apstra_streaming_telemetry_proto_rawDescData = protoimpl.X.CompressGZIP(file_apstra_streaming_telemetry_proto_rawDescData)
	})
	return file_apstra_streaming_telemetry_proto_rawDescData
}

var file_apstra_streaming_telemetry_proto_enumTypes = make([]protoimpl.EnumInfo, 22)
var file_apstra_streaming_telemetry_proto_msgTypes = make([]protoimpl.MessageInfo, 54)
var file_apstra_streaming_telemetry_proto_goTypes = []interface{}{
	(DeviceState)(0),                         // 0: aos.streaming.DeviceState
	(Feature)(0),                             // 1: aos.streaming.Feature
	(StreamingType)(0),                       // 2: aos.streaming.StreamingType
	(StreamingProtocol)(0),                   // 3: aos.streaming.StreamingProtocol
	(StreamingStatus)(0),                     // 4: aos.streaming.StreamingStatus
	(StreamingSequencingMode)(0),             // 5: aos.streaming.StreamingSequencingMode
	(BgpSessionAddressFamily)(0),             // 6: aos.streaming.BgpSessionAddressFamily
	(LinkStatus)(0),                          // 7: aos.streaming.LinkStatus
	(MacState)(0),                            // 8: aos.streaming.MacState
	(ArpState)(0),                            // 9: aos.streaming.ArpState
	(MlagDomainState)(0),                     // 10: aos.streaming.MlagDomainState
	(MlagIntfState)(0),                       // 11: aos.streaming.MlagIntfState
	(RouteState)(0),                          // 12: aos.streaming.RouteState
	(AlertSeverity)(0),                       // 13: aos.streaming.AlertSeverity
	(RouteEntryStatus)(0),                    // 14: aos.streaming.RouteEntryStatus
	(NextHopStatus)(0),                       // 15: aos.streaming.NextHopStatus
	(RouteType)(0),                           // 16: aos.streaming.RouteType
	(DeploymentStatus)(0),                    // 17: aos.streaming.DeploymentStatus
	(StreamingAlertReason)(0),                // 18: aos.streaming.StreamingAlertReason
	(BgpSessionState)(0),                     // 19: aos.streaming.BgpSessionState
	(AggregationType)(0),                     // 20: aos.streaming.AggregationType
	(HeadroomType)(0),                        // 21: aos.streaming.HeadroomType
	(*DeviceStateEvent)(nil),                 // 22: aos.streaming.DeviceStateEvent
	(*TrafficEvent)(nil),                     // 23: aos.streaming.TrafficEvent
	(*StreamingEvent)(nil),                   // 24: aos.streaming.StreamingEvent
	(*CablePeerEvent)(nil),                   // 25: aos.streaming.CablePeerEvent
	(*BGPNeighborEvent)(nil),                 // 26: aos.streaming.BGPNeighborEvent
	(*LinkStatusEvent)(nil),                  // 27: aos.streaming.LinkStatusEvent
	(*MacEvent)(nil),                         // 28: aos.streaming.MacEvent
	(*ArpEvent)(nil),                         // 29: aos.streaming.ArpEvent
	(*LagEvent)(nil),                         // 30: aos.streaming.LagEvent
	(*MlagEvent)(nil),                        // 31: aos.streaming.MlagEvent
	(*ExtensibleServiceEvent)(nil),           // 32: aos.streaming.ExtensibleServiceEvent
	(*RouteEvent)(nil),                       // 33: aos.streaming.RouteEvent
	(*EvpnType3RouteEvent)(nil),              // 34: aos.streaming.EvpnType3RouteEvent
	(*ActiveFloodlistEvent)(nil),             // 35: aos.streaming.ActiveFloodlistEvent
	(*EvpnType5RouteEvent)(nil),              // 36: aos.streaming.EvpnType5RouteEvent
	(*Event)(nil),                            // 37: aos.streaming.Event
	(*HostnameAlert)(nil),                    // 38: aos.streaming.HostnameAlert
	(*ConfigDeviationAlert)(nil),             // 39: aos.streaming.ConfigDeviationAlert
	(*LivenessAlert)(nil),                    // 40: aos.streaming.LivenessAlert
	(*ExtensibleAlert)(nil),                  // 41: aos.streaming.ExtensibleAlert
	(*DeploymentAlert)(nil),                  // 42: aos.streaming.DeploymentAlert
	(*BlueprintRenderingAlert)(nil),          // 43: aos.streaming.BlueprintRenderingAlert
	(*RouteAlert)(nil),                       // 44: aos.streaming.RouteAlert
	(*LagAlert)(nil),                         // 45: aos.streaming.LagAlert
	(*StreamingAlert)(nil),                   // 46: aos.streaming.StreamingAlert
	(*CablePeerMismatchAlert)(nil),           // 47: aos.streaming.CablePeerMismatchAlert
	(*BGPNeighborMismatchAlert)(nil),         // 48: aos.streaming.BGPNeighborMismatchAlert
	(*InterfaceLinkStatusMismatchAlert)(nil), // 49: aos.streaming.InterfaceLinkStatusMismatchAlert
	(*CountersAlert)(nil),                    // 50: aos.streaming.CountersAlert
	(*KeyValuePair)(nil),                     // 51: aos.streaming.KeyValuePair
	(*ProbeAlert)(nil),                       // 52: aos.streaming.ProbeAlert
	(*ConfigMismatchAlert)(nil),              // 53: aos.streaming.ConfigMismatchAlert
	(*HeadroomAlert)(nil),                    // 54: aos.streaming.HeadroomAlert
	(*MacAlert)(nil),                         // 55: aos.streaming.MacAlert
	(*ArpAlert)(nil),                         // 56: aos.streaming.ArpAlert
	(*MlagAlert)(nil),                        // 57: aos.streaming.MlagAlert
	(*TestAlert)(nil),                        // 58: aos.streaming.TestAlert
	(*InterfaceCounters)(nil),                // 59: aos.streaming.InterfaceCounters
	(*SystemInfo)(nil),                       // 60: aos.streaming.SystemInfo
	(*ProcessInfo)(nil),                      // 61: aos.streaming.ProcessInfo
	(*FileInfo)(nil),                         // 62: aos.streaming.FileInfo
	(*SysResourceCounters)(nil),              // 63: aos.streaming.SysResourceCounters
	(*Tag)(nil),                              // 64: aos.streaming.Tag
	(*Field)(nil),                            // 65: aos.streaming.Field
	(*ProbeProperty)(nil),                    // 66: aos.streaming.ProbeProperty
	(*InterfaceCountersUtilization)(nil),     // 67: aos.streaming.InterfaceCountersUtilization
	(*SystemInterfaceUtilization)(nil),       // 68: aos.streaming.SystemInterfaceUtilization
	(*ProbeMessage)(nil),                     // 69: aos.streaming.ProbeMessage
	(*GenericPerfmonMessage)(nil),            // 70: aos.streaming.GenericPerfmonMessage
	(*ProbeData)(nil),                        // 71: aos.streaming.ProbeData
	(*PerfMon)(nil),                          // 72: aos.streaming.PerfMon
	(*Alert)(nil),                            // 73: aos.streaming.Alert
	(*AosMessage)(nil),                       // 74: aos.streaming.AosMessage
	(*AosSequencedMessage)(nil),              // 75: aos.streaming.AosSequencedMessage
}
var file_apstra_streaming_telemetry_proto_depIdxs = []int32{
	0,  // 0: aos.streaming.DeviceStateEvent.state:type_name -> aos.streaming.DeviceState
	1,  // 1: aos.streaming.TrafficEvent.node_role:type_name -> aos.streaming.Feature
	1,  // 2: aos.streaming.TrafficEvent.port_role:type_name -> aos.streaming.Feature
	20, // 3: aos.streaming.TrafficEvent.aggregation_type:type_name -> aos.streaming.AggregationType
	2,  // 4: aos.streaming.StreamingEvent.streaming_type:type_name -> aos.streaming.StreamingType
	3,  // 5: aos.streaming.StreamingEvent.protocol:type_name -> aos.streaming.StreamingProtocol
	4,  // 6: aos.streaming.StreamingEvent.status:type_name -> aos.streaming.StreamingStatus
	5,  // 7: aos.streaming.StreamingEvent.sequencing_mode:type_name -> aos.streaming.StreamingSequencingMode
	19, // 8: aos.streaming.BGPNeighborEvent.state:type_name -> aos.streaming.BgpSessionState
	6,  // 9: aos.streaming.BGPNeighborEvent.addr_family:type_name -> aos.streaming.BgpSessionAddressFamily
	7,  // 10: aos.streaming.LinkStatusEvent.state:type_name -> aos.streaming.LinkStatus
	8,  // 11: aos.streaming.MacEvent.state:type_name -> aos.streaming.MacState
	9,  // 12: aos.streaming.ArpEvent.state:type_name -> aos.streaming.ArpState
	10, // 13: aos.streaming.MlagEvent.domain_state:type_name -> aos.streaming.MlagDomainState
	11, // 14: aos.streaming.MlagEvent.intf_state:type_name -> aos.streaming.MlagIntfState
	14, // 15: aos.streaming.RouteEvent.status:type_name -> aos.streaming.RouteEntryStatus
	12, // 16: aos.streaming.EvpnType3RouteEvent.state:type_name -> aos.streaming.RouteState
	12, // 17: aos.streaming.ActiveFloodlistEvent.state:type_name -> aos.streaming.RouteState
	12, // 18: aos.streaming.EvpnType5RouteEvent.state:type_name -> aos.streaming.RouteState
	22, // 19: aos.streaming.Event.device_state:type_name -> aos.streaming.DeviceStateEvent
	24, // 20: aos.streaming.Event.streaming:type_name -> aos.streaming.StreamingEvent
	25, // 21: aos.streaming.Event.cable_peer:type_name -> aos.streaming.CablePeerEvent
	26, // 22: aos.streaming.Event.bgp_neighbor:type_name -> aos.streaming.BGPNeighborEvent
	27, // 23: aos.streaming.Event.link_status:type_name -> aos.streaming.LinkStatusEvent
	23, // 24: aos.streaming.Event.traffic:type_name -> aos.streaming.TrafficEvent
	28, // 25: aos.streaming.Event.mac_state:type_name -> aos.streaming.MacEvent
	29, // 26: aos.streaming.Event.arp_state:type_name -> aos.streaming.ArpEvent
	30, // 27: aos.streaming.Event.lag_state:type_name -> aos.streaming.LagEvent
	31, // 28: aos.streaming.Event.mlag_state:type_name -> aos.streaming.MlagEvent
	32, // 29: aos.streaming.Event.extensible_event:type_name -> aos.streaming.ExtensibleServiceEvent
	33, // 30: aos.streaming.Event.route_state:type_name -> aos.streaming.RouteEvent
	17, // 31: aos.streaming.DeploymentAlert.expected_deployment_status:type_name -> aos.streaming.DeploymentStatus
	17, // 32: aos.streaming.DeploymentAlert.actual_deployment_status:type_name -> aos.streaming.DeploymentStatus
	14, // 33: aos.streaming.RouteAlert.expected_dest_status:type_name -> aos.streaming.RouteEntryStatus
	14, // 34: aos.streaming.RouteAlert.actual_dest_status:type_name -> aos.streaming.RouteEntryStatus
	2,  // 35: aos.streaming.StreamingAlert.streaming_type:type_name -> aos.streaming.StreamingType
	3,  // 36: aos.streaming.StreamingAlert.protocol:type_name -> aos.streaming.StreamingProtocol
	18, // 37: aos.streaming.StreamingAlert.reason:type_name -> aos.streaming.StreamingAlertReason
	5,  // 38: aos.streaming.StreamingAlert.sequencing_mode:type_name -> aos.streaming.StreamingSequencingMode
	19, // 39: aos.streaming.BGPNeighborMismatchAlert.expected_state:type_name -> aos.streaming.BgpSessionState
	19, // 40: aos.streaming.BGPNeighborMismatchAlert.actual_state:type_name -> aos.streaming.BgpSessionState
	6,  // 41: aos.streaming.BGPNeighborMismatchAlert.addr_family:type_name -> aos.streaming.BgpSessionAddressFamily
	7,  // 42: aos.streaming.InterfaceLinkStatusMismatchAlert.expected_ifstatus:type_name -> aos.streaming.LinkStatus
	7,  // 43: aos.streaming.InterfaceLinkStatusMismatchAlert.actual_ifstatus:type_name -> aos.streaming.LinkStatus
	1,  // 44: aos.streaming.CountersAlert.node_role:type_name -> aos.streaming.Feature
	1,  // 45: aos.streaming.CountersAlert.port_role:type_name -> aos.streaming.Feature
	20, // 46: aos.streaming.CountersAlert.aggregation_type:type_name -> aos.streaming.AggregationType
	51, // 47: aos.streaming.ProbeAlert.key_value_pairs:type_name -> aos.streaming.KeyValuePair
	21, // 48: aos.streaming.HeadroomAlert.headroom_type:type_name -> aos.streaming.HeadroomType
	10, // 49: aos.streaming.MlagAlert.expected_domain_state:type_name -> aos.streaming.MlagDomainState
	10, // 50: aos.streaming.MlagAlert.actual_domain_state:type_name -> aos.streaming.MlagDomainState
	11, // 51: aos.streaming.MlagAlert.expected_intf_state:type_name -> aos.streaming.MlagIntfState
	11, // 52: aos.streaming.MlagAlert.actual_intf_state:type_name -> aos.streaming.MlagIntfState
	60, // 53: aos.streaming.SysResourceCounters.system_info:type_name -> aos.streaming.SystemInfo
	61, // 54: aos.streaming.SysResourceCounters.process_info:type_name -> aos.streaming.ProcessInfo
	62, // 55: aos.streaming.SysResourceCounters.file_info:type_name -> aos.streaming.FileInfo
	66, // 56: aos.streaming.ProbeMessage.property:type_name -> aos.streaming.ProbeProperty
	34, // 57: aos.streaming.ProbeMessage.evpn_type3_route_state:type_name -> aos.streaming.EvpnType3RouteEvent
	36, // 58: aos.streaming.ProbeMessage.evpn_type5_route_state:type_name -> aos.streaming.EvpnType5RouteEvent
	67, // 59: aos.streaming.ProbeMessage.interface_counters_utilization:type_name -> aos.streaming.InterfaceCountersUtilization
	68, // 60: aos.streaming.ProbeMessage.system_interface_utilization:type_name -> aos.streaming.SystemInterfaceUtilization
	35, // 61: aos.streaming.ProbeMessage.active_floodlist:type_name -> aos.streaming.ActiveFloodlistEvent
	64, // 62: aos.streaming.GenericPerfmonMessage.tags:type_name -> aos.streaming.Tag
	65, // 63: aos.streaming.GenericPerfmonMessage.fields:type_name -> aos.streaming.Field
	64, // 64: aos.streaming.ProbeData.tags:type_name -> aos.streaming.Tag
	65, // 65: aos.streaming.ProbeData.fields:type_name -> aos.streaming.Field
	59, // 66: aos.streaming.PerfMon.interface_counters:type_name -> aos.streaming.InterfaceCounters
	63, // 67: aos.streaming.PerfMon.system_resource_counters:type_name -> aos.streaming.SysResourceCounters
	70, // 68: aos.streaming.PerfMon.generic:type_name -> aos.streaming.GenericPerfmonMessage
	69, // 69: aos.streaming.PerfMon.probe_message:type_name -> aos.streaming.ProbeMessage
	13, // 70: aos.streaming.Alert.severity:type_name -> aos.streaming.AlertSeverity
	39, // 71: aos.streaming.Alert.config_deviation_alert:type_name -> aos.streaming.ConfigDeviationAlert
	46, // 72: aos.streaming.Alert.streaming_alert:type_name -> aos.streaming.StreamingAlert
	47, // 73: aos.streaming.Alert.cable_peer_mismatch_alert:type_name -> aos.streaming.CablePeerMismatchAlert
	48, // 74: aos.streaming.Alert.bgp_neighbor_mismatch_alert:type_name -> aos.streaming.BGPNeighborMismatchAlert
	49, // 75: aos.streaming.Alert.interface_link_status_mismatch_alert:type_name -> aos.streaming.InterfaceLinkStatusMismatchAlert
	38, // 76: aos.streaming.Alert.hostname_alert:type_name -> aos.streaming.HostnameAlert
	44, // 77: aos.streaming.Alert.route_alert:type_name -> aos.streaming.RouteAlert
	40, // 78: aos.streaming.Alert.liveness_alert:type_name -> aos.streaming.LivenessAlert
	42, // 79: aos.streaming.Alert.deployment_alert:type_name -> aos.streaming.DeploymentAlert
	43, // 80: aos.streaming.Alert.blueprint_rendering_alert:type_name -> aos.streaming.BlueprintRenderingAlert
	50, // 81: aos.streaming.Alert.counters_alert:type_name -> aos.streaming.CountersAlert
	55, // 82: aos.streaming.Alert.mac_alert:type_name -> aos.streaming.MacAlert
	56, // 83: aos.streaming.Alert.arp_alert:type_name -> aos.streaming.ArpAlert
	54, // 84: aos.streaming.Alert.headroom_alert:type_name -> aos.streaming.HeadroomAlert
	45, // 85: aos.streaming.Alert.lag_alert:type_name -> aos.streaming.LagAlert
	57, // 86: aos.streaming.Alert.mlag_alert:type_name -> aos.streaming.MlagAlert
	52, // 87: aos.streaming.Alert.probe_alert:type_name -> aos.streaming.ProbeAlert
	53, // 88: aos.streaming.Alert.config_mismatch_alert:type_name -> aos.streaming.ConfigMismatchAlert
	41, // 89: aos.streaming.Alert.extensible_alert:type_name -> aos.streaming.ExtensibleAlert
	58, // 90: aos.streaming.Alert.test_alert:type_name -> aos.streaming.TestAlert
	73, // 91: aos.streaming.AosMessage.alert:type_name -> aos.streaming.Alert
	37, // 92: aos.streaming.AosMessage.event:type_name -> aos.streaming.Event
	72, // 93: aos.streaming.AosMessage.perf_mon:type_name -> aos.streaming.PerfMon
	94, // [94:94] is the sub-list for method output_type
	94, // [94:94] is the sub-list for method input_type
	94, // [94:94] is the sub-list for extension type_name
	94, // [94:94] is the sub-list for extension extendee
	0,  // [0:94] is the sub-list for field type_name
}

func init() { file_apstra_streaming_telemetry_proto_init() }
func file_apstra_streaming_telemetry_proto_init() {
	if File_apstra_streaming_telemetry_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_apstra_streaming_telemetry_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceStateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CablePeerEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BGPNeighborEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkStatusEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArpEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LagEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MlagEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtensibleServiceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvpnType3RouteEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActiveFloodlistEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvpnType5RouteEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostnameAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigDeviationAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LivenessAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtensibleAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlueprintRenderingAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LagAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CablePeerMismatchAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BGPNeighborMismatchAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceLinkStatusMismatchAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountersAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValuePair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProbeAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigMismatchAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeadroomAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArpAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MlagAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceCounters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysResourceCounters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProbeProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceCountersUtilization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemInterfaceUtilization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProbeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericPerfmonMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProbeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerfMon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AosMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apstra_streaming_telemetry_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AosSequencedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_apstra_streaming_telemetry_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*TrafficEvent_NodeRole)(nil),
		(*TrafficEvent_PortRole)(nil),
		(*TrafficEvent_Port)(nil),
		(*TrafficEvent_Node)(nil),
		(*TrafficEvent_Pod)(nil),
		(*TrafficEvent_DeltaPercentage)(nil),
		(*TrafficEvent_DeltaNonnormalized)(nil),
	}
	file_apstra_streaming_telemetry_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*Event_DeviceState)(nil),
		(*Event_Streaming)(nil),
		(*Event_CablePeer)(nil),
		(*Event_BgpNeighbor)(nil),
		(*Event_LinkStatus)(nil),
		(*Event_Traffic)(nil),
		(*Event_MacState)(nil),
		(*Event_ArpState)(nil),
		(*Event_LagState)(nil),
		(*Event_MlagState)(nil),
		(*Event_ExtensibleEvent)(nil),
		(*Event_RouteState)(nil),
	}
	file_apstra_streaming_telemetry_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*CountersAlert_NodeRole)(nil),
		(*CountersAlert_PortRole)(nil),
		(*CountersAlert_Port)(nil),
		(*CountersAlert_Node)(nil),
		(*CountersAlert_Pod)(nil),
	}
	file_apstra_streaming_telemetry_proto_msgTypes[42].OneofWrappers = []interface{}{
		(*Tag_Int64Value)(nil),
		(*Tag_FloatValue)(nil),
		(*Tag_StringValue)(nil),
	}
	file_apstra_streaming_telemetry_proto_msgTypes[43].OneofWrappers = []interface{}{
		(*Field_Int64Value)(nil),
		(*Field_FloatValue)(nil),
		(*Field_StringValue)(nil),
	}
	file_apstra_streaming_telemetry_proto_msgTypes[47].OneofWrappers = []interface{}{
		(*ProbeMessage_Int64Value)(nil),
		(*ProbeMessage_FloatValue)(nil),
		(*ProbeMessage_StringValue)(nil),
		(*ProbeMessage_EvpnType3RouteState)(nil),
		(*ProbeMessage_EvpnType5RouteState)(nil),
		(*ProbeMessage_InterfaceCountersUtilization)(nil),
		(*ProbeMessage_SystemInterfaceUtilization)(nil),
		(*ProbeMessage_ActiveFloodlist)(nil),
	}
	file_apstra_streaming_telemetry_proto_msgTypes[50].OneofWrappers = []interface{}{
		(*PerfMon_InterfaceCounters)(nil),
		(*PerfMon_SystemResourceCounters)(nil),
		(*PerfMon_Generic)(nil),
		(*PerfMon_ProbeMessage)(nil),
	}
	file_apstra_streaming_telemetry_proto_msgTypes[51].OneofWrappers = []interface{}{
		(*Alert_ConfigDeviationAlert)(nil),
		(*Alert_StreamingAlert)(nil),
		(*Alert_CablePeerMismatchAlert)(nil),
		(*Alert_BgpNeighborMismatchAlert)(nil),
		(*Alert_InterfaceLinkStatusMismatchAlert)(nil),
		(*Alert_HostnameAlert)(nil),
		(*Alert_RouteAlert)(nil),
		(*Alert_LivenessAlert)(nil),
		(*Alert_DeploymentAlert)(nil),
		(*Alert_BlueprintRenderingAlert)(nil),
		(*Alert_CountersAlert)(nil),
		(*Alert_MacAlert)(nil),
		(*Alert_ArpAlert)(nil),
		(*Alert_HeadroomAlert)(nil),
		(*Alert_LagAlert)(nil),
		(*Alert_MlagAlert)(nil),
		(*Alert_ProbeAlert)(nil),
		(*Alert_ConfigMismatchAlert)(nil),
		(*Alert_ExtensibleAlert)(nil),
		(*Alert_TestAlert)(nil),
	}
	file_apstra_streaming_telemetry_proto_msgTypes[52].OneofWrappers = []interface{}{
		(*AosMessage_Alert)(nil),
		(*AosMessage_Event)(nil),
		(*AosMessage_PerfMon)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_apstra_streaming_telemetry_proto_rawDesc,
			NumEnums:      22,
			NumMessages:   54,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_apstra_streaming_telemetry_proto_goTypes,
		DependencyIndexes: file_apstra_streaming_telemetry_proto_depIdxs,
		EnumInfos:         file_apstra_streaming_telemetry_proto_enumTypes,
		MessageInfos:      file_apstra_streaming_telemetry_proto_msgTypes,
	}.Build()
	File_apstra_streaming_telemetry_proto = out.File
	file_apstra_streaming_telemetry_proto_rawDesc = nil
	file_apstra_streaming_telemetry_proto_goTypes = nil
	file_apstra_streaming_telemetry_proto_depIdxs = nil
}
